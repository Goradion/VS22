/* soapServerComWebserviceImplPortBindingService.cpp
   Generated by gSOAP 2.8.44 for F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapServerComWebserviceImplPortBindingService.h"

ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService(const ServerComWebserviceImplPortBindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ServerComWebserviceImplPortBindingService_init(_soap->imode, _soap->omode);
}

ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingService_init(iomode, iomode);
}

ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingService_init(imode, omode);
}

ServerComWebserviceImplPortBindingService::~ServerComWebserviceImplPortBindingService()
{	if (this->soap_own)
		soap_free(this->soap);
}

void ServerComWebserviceImplPortBindingService::ServerComWebserviceImplPortBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://webservice.tafelServer/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

void ServerComWebserviceImplPortBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ServerComWebserviceImplPortBindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ServerComWebserviceImplPortBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
ServerComWebserviceImplPortBindingService *ServerComWebserviceImplPortBindingService::copy()
{	ServerComWebserviceImplPortBindingService *dup = SOAP_NEW_COPY(ServerComWebserviceImplPortBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

ServerComWebserviceImplPortBindingService& ServerComWebserviceImplPortBindingService::operator=(const ServerComWebserviceImplPortBindingService& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	return *this;
}

int ServerComWebserviceImplPortBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ServerComWebserviceImplPortBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int ServerComWebserviceImplPortBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int ServerComWebserviceImplPortBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int ServerComWebserviceImplPortBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int ServerComWebserviceImplPortBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void ServerComWebserviceImplPortBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ServerComWebserviceImplPortBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ServerComWebserviceImplPortBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void ServerComWebserviceImplPortBindingService::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *ServerComWebserviceImplPortBindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int ServerComWebserviceImplPortBindingService::run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ServerComWebserviceImplPortBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET ServerComWebserviceImplPortBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET ServerComWebserviceImplPortBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int ServerComWebserviceImplPortBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int ServerComWebserviceImplPortBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__deletePublicMessage(struct soap*, ServerComWebserviceImplPortBindingService*);
static int serve___ns1__modifyPublicMessage(struct soap*, ServerComWebserviceImplPortBindingService*);
static int serve___ns1__receiveMessage(struct soap*, ServerComWebserviceImplPortBindingService*);
static int serve___ns1__registerServer(struct soap*, ServerComWebserviceImplPortBindingService*);
static int serve___ns1__receiveSoapableMessage(struct soap*, ServerComWebserviceImplPortBindingService*);

int ServerComWebserviceImplPortBindingService::dispatch()
{	return dispatch(this->soap);
}

int ServerComWebserviceImplPortBindingService::dispatch(struct soap* soap)
{
	ServerComWebserviceImplPortBindingService_init(soap->imode, soap->omode);

	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:deletePublicMessage"))
		return serve___ns1__deletePublicMessage(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:modifyPublicMessage"))
		return serve___ns1__modifyPublicMessage(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:receiveMessage"))
		return serve___ns1__receiveMessage(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:registerServer"))
		return serve___ns1__registerServer(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:receiveSoapableMessage"))
		return serve___ns1__receiveSoapableMessage(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__deletePublicMessage(struct soap *soap, ServerComWebserviceImplPortBindingService *service)
{	struct __ns1__deletePublicMessage soap_tmp___ns1__deletePublicMessage;
	ns1__deletePublicMessageResponse ns1__deletePublicMessageResponse_;
	ns1__deletePublicMessageResponse_.soap_default(soap);
	soap_default___ns1__deletePublicMessage(soap, &soap_tmp___ns1__deletePublicMessage);
	if (!soap_get___ns1__deletePublicMessage(soap, &soap_tmp___ns1__deletePublicMessage, "-ns1:deletePublicMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->deletePublicMessage(soap_tmp___ns1__deletePublicMessage.ns1__deletePublicMessage_, ns1__deletePublicMessageResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__deletePublicMessageResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__deletePublicMessageResponse_.soap_put(soap, "ns1:deletePublicMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__deletePublicMessageResponse_.soap_put(soap, "ns1:deletePublicMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__modifyPublicMessage(struct soap *soap, ServerComWebserviceImplPortBindingService *service)
{	struct __ns1__modifyPublicMessage soap_tmp___ns1__modifyPublicMessage;
	ns1__modifyPublicMessageResponse ns1__modifyPublicMessageResponse_;
	ns1__modifyPublicMessageResponse_.soap_default(soap);
	soap_default___ns1__modifyPublicMessage(soap, &soap_tmp___ns1__modifyPublicMessage);
	if (!soap_get___ns1__modifyPublicMessage(soap, &soap_tmp___ns1__modifyPublicMessage, "-ns1:modifyPublicMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->modifyPublicMessage(soap_tmp___ns1__modifyPublicMessage.ns1__modifyPublicMessage_, ns1__modifyPublicMessageResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__modifyPublicMessageResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__modifyPublicMessageResponse_.soap_put(soap, "ns1:modifyPublicMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__modifyPublicMessageResponse_.soap_put(soap, "ns1:modifyPublicMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__receiveMessage(struct soap *soap, ServerComWebserviceImplPortBindingService *service)
{	struct __ns1__receiveMessage soap_tmp___ns1__receiveMessage;
	ns1__receiveMessageResponse ns1__receiveMessageResponse_;
	ns1__receiveMessageResponse_.soap_default(soap);
	soap_default___ns1__receiveMessage(soap, &soap_tmp___ns1__receiveMessage);
	if (!soap_get___ns1__receiveMessage(soap, &soap_tmp___ns1__receiveMessage, "-ns1:receiveMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->receiveMessage(soap_tmp___ns1__receiveMessage.ns1__receiveMessage_, ns1__receiveMessageResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__receiveMessageResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__receiveMessageResponse_.soap_put(soap, "ns1:receiveMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__receiveMessageResponse_.soap_put(soap, "ns1:receiveMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__registerServer(struct soap *soap, ServerComWebserviceImplPortBindingService *service)
{	struct __ns1__registerServer soap_tmp___ns1__registerServer;
	ns1__registerServerResponse ns1__registerServerResponse_;
	ns1__registerServerResponse_.soap_default(soap);
	soap_default___ns1__registerServer(soap, &soap_tmp___ns1__registerServer);
	if (!soap_get___ns1__registerServer(soap, &soap_tmp___ns1__registerServer, "-ns1:registerServer", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->registerServer(soap_tmp___ns1__registerServer.ns1__registerServer_, ns1__registerServerResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__registerServerResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__registerServerResponse_.soap_put(soap, "ns1:registerServerResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__registerServerResponse_.soap_put(soap, "ns1:registerServerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__receiveSoapableMessage(struct soap *soap, ServerComWebserviceImplPortBindingService *service)
{	struct __ns1__receiveSoapableMessage soap_tmp___ns1__receiveSoapableMessage;
	ns1__receiveSoapableMessageResponse ns1__receiveSoapableMessageResponse_;
	ns1__receiveSoapableMessageResponse_.soap_default(soap);
	soap_default___ns1__receiveSoapableMessage(soap, &soap_tmp___ns1__receiveSoapableMessage);
	if (!soap_get___ns1__receiveSoapableMessage(soap, &soap_tmp___ns1__receiveSoapableMessage, "-ns1:receiveSoapableMessage", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->receiveSoapableMessage(soap_tmp___ns1__receiveSoapableMessage.ns1__receiveSoapableMessage_, ns1__receiveSoapableMessageResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__receiveSoapableMessageResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__receiveSoapableMessageResponse_.soap_put(soap, "ns1:receiveSoapableMessageResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__receiveSoapableMessageResponse_.soap_put(soap, "ns1:receiveSoapableMessageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
