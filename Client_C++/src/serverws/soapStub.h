/* soapStub.h
   Generated by gSOAP 2.8.44 for F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://webservice.tafelServer/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20844
# error "GSOAP VERSION 20844 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__receiveMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:137 */
class ns1__receiveMessageResponse;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:140 */
class ns1__receiveSoapableMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:143 */
class ns1__soapableMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:146 */
class ns1__receiveSoapableMessageResponse;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:149 */
class ns1__deletePublicMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:152 */
class ns1__deletePublicMessageResponse;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:155 */
class ns1__registerServer;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:158 */
class ns1__registerServerResponse;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:161 */
class ns1__modifyPublicMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:164 */
class ns1__modifyPublicMessageResponse;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:167 */
struct __ns1__deletePublicMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:647 */
struct __ns1__modifyPublicMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:714 */
struct __ns1__receiveMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:781 */
struct __ns1__registerServer;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:848 */
struct __ns1__receiveSoapableMessage;	/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:915 */

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:137 */
#ifndef SOAP_TYPE_ns1__receiveMessage
#define SOAP_TYPE_ns1__receiveMessage (7)
/* complex XSD type 'ns1:receiveMessage': */
class SOAP_CMAC ns1__receiveMessage {
      public:
        /// Required element 'arg0' of XSD type 'xsd:int'
        int arg0;
        /// Required element 'arg1' of XSD type 'xsd:int'
        int arg1;
        /// Required element 'arg2' of XSD type 'xsd:int'
        int arg2;
        /// Optional element 'arg3' of XSD type 'xsd:string'
        char *arg3;
        /// Optional element 'arg4' of XSD type 'xsd:string'
        char *arg4;
        /// Required element 'arg5' of XSD type 'xsd:int'
        int arg5;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__receiveMessage
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__receiveMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__receiveMessage, default initialized and not managed by a soap context
        virtual ns1__receiveMessage *soap_alloc(void) const { return SOAP_NEW(ns1__receiveMessage); }
      public:
        /// Constructor with initializations
        ns1__receiveMessage()
        {
          arg0 = (int)0;
          arg1 = (int)0;
          arg2 = (int)0;
          arg3 = (char *)0;
          arg4 = (char *)0;
          arg5 = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__receiveMessage() { }
        /// Friend allocator used by soap_new_ns1__receiveMessage(struct soap*, int)
        friend SOAP_FMAC1 ns1__receiveMessage * SOAP_FMAC2 soap_instantiate_ns1__receiveMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:140 */
#ifndef SOAP_TYPE_ns1__receiveMessageResponse
#define SOAP_TYPE_ns1__receiveMessageResponse (8)
/* complex XSD type 'ns1:receiveMessageResponse': */
class SOAP_CMAC ns1__receiveMessageResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        char *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__receiveMessageResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__receiveMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__receiveMessageResponse, default initialized and not managed by a soap context
        virtual ns1__receiveMessageResponse *soap_alloc(void) const { return SOAP_NEW(ns1__receiveMessageResponse); }
      public:
        /// Constructor with initializations
        ns1__receiveMessageResponse()
        {
          return_ = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__receiveMessageResponse() { }
        /// Friend allocator used by soap_new_ns1__receiveMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__receiveMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__receiveMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:143 */
#ifndef SOAP_TYPE_ns1__receiveSoapableMessage
#define SOAP_TYPE_ns1__receiveSoapableMessage (9)
/* complex XSD type 'ns1:receiveSoapableMessage': */
class SOAP_CMAC ns1__receiveSoapableMessage {
      public:
        /// Optional element 'arg0' of XSD type 'ns1:soapableMessage'
        ns1__soapableMessage *arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__receiveSoapableMessage
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__receiveSoapableMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__receiveSoapableMessage, default initialized and not managed by a soap context
        virtual ns1__receiveSoapableMessage *soap_alloc(void) const { return SOAP_NEW(ns1__receiveSoapableMessage); }
      public:
        /// Constructor with initializations
        ns1__receiveSoapableMessage()
        {
          arg0 = (ns1__soapableMessage *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__receiveSoapableMessage() { }
        /// Friend allocator used by soap_new_ns1__receiveSoapableMessage(struct soap*, int)
        friend SOAP_FMAC1 ns1__receiveSoapableMessage * SOAP_FMAC2 soap_instantiate_ns1__receiveSoapableMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:146 */
#ifndef SOAP_TYPE_ns1__soapableMessage
#define SOAP_TYPE_ns1__soapableMessage (10)
/* complex XSD type 'ns1:soapableMessage': */
class SOAP_CMAC ns1__soapableMessage {
      public:
        /// Required element 'serialVersionUID' of XSD type 'xsd:long'
        LONG64 serialVersionUID;
        /// Required element 'messageID' of XSD type 'xsd:int'
        int messageID;
        /// Required element 'userID' of XSD type 'xsd:int'
        int userID;
        /// Required element 'abtNr' of XSD type 'xsd:int'
        int abtNr;
        /// Optional element 'inhalt' of XSD type 'xsd:string'
        char *inhalt;
        /// Required element 'oeffentlich' of XSD type 'xsd:boolean'
        bool oeffentlich;
        /// Sequence of elements 'groups' of XSD type 'xsd:int' stored in dynamic array groups of length __sizegroups
        int __sizegroups;
        int *groups;
        /// Optional element 'time' of XSD type 'xsd:dateTime'
        time_t *time;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__soapableMessage
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__soapableMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__soapableMessage, default initialized and not managed by a soap context
        virtual ns1__soapableMessage *soap_alloc(void) const { return SOAP_NEW(ns1__soapableMessage); }
      public:
        /// Constructor with initializations
        ns1__soapableMessage()
        {
          serialVersionUID = (LONG64)0;
          messageID = (int)0;
          userID = (int)0;
          abtNr = (int)0;
          inhalt = (char *)0;
          oeffentlich = (bool)0;
          __sizegroups = 0;
          groups = NULL;
          time = (time_t *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__soapableMessage() { }
        /// Friend allocator used by soap_new_ns1__soapableMessage(struct soap*, int)
        friend SOAP_FMAC1 ns1__soapableMessage * SOAP_FMAC2 soap_instantiate_ns1__soapableMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:149 */
#ifndef SOAP_TYPE_ns1__receiveSoapableMessageResponse
#define SOAP_TYPE_ns1__receiveSoapableMessageResponse (11)
/* complex XSD type 'ns1:receiveSoapableMessageResponse': */
class SOAP_CMAC ns1__receiveSoapableMessageResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        char *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__receiveSoapableMessageResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__receiveSoapableMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__receiveSoapableMessageResponse, default initialized and not managed by a soap context
        virtual ns1__receiveSoapableMessageResponse *soap_alloc(void) const { return SOAP_NEW(ns1__receiveSoapableMessageResponse); }
      public:
        /// Constructor with initializations
        ns1__receiveSoapableMessageResponse()
        {
          return_ = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__receiveSoapableMessageResponse() { }
        /// Friend allocator used by soap_new_ns1__receiveSoapableMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__receiveSoapableMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__receiveSoapableMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:152 */
#ifndef SOAP_TYPE_ns1__deletePublicMessage
#define SOAP_TYPE_ns1__deletePublicMessage (12)
/* complex XSD type 'ns1:deletePublicMessage': */
class SOAP_CMAC ns1__deletePublicMessage {
      public:
        /// Required element 'arg0' of XSD type 'xsd:int'
        int arg0;
        /// Required element 'arg1' of XSD type 'xsd:int'
        int arg1;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__deletePublicMessage
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__deletePublicMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__deletePublicMessage, default initialized and not managed by a soap context
        virtual ns1__deletePublicMessage *soap_alloc(void) const { return SOAP_NEW(ns1__deletePublicMessage); }
      public:
        /// Constructor with initializations
        ns1__deletePublicMessage()
        {
          arg0 = (int)0;
          arg1 = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__deletePublicMessage() { }
        /// Friend allocator used by soap_new_ns1__deletePublicMessage(struct soap*, int)
        friend SOAP_FMAC1 ns1__deletePublicMessage * SOAP_FMAC2 soap_instantiate_ns1__deletePublicMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:155 */
#ifndef SOAP_TYPE_ns1__deletePublicMessageResponse
#define SOAP_TYPE_ns1__deletePublicMessageResponse (13)
/* complex XSD type 'ns1:deletePublicMessageResponse': */
class SOAP_CMAC ns1__deletePublicMessageResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        char *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__deletePublicMessageResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__deletePublicMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__deletePublicMessageResponse, default initialized and not managed by a soap context
        virtual ns1__deletePublicMessageResponse *soap_alloc(void) const { return SOAP_NEW(ns1__deletePublicMessageResponse); }
      public:
        /// Constructor with initializations
        ns1__deletePublicMessageResponse()
        {
          return_ = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__deletePublicMessageResponse() { }
        /// Friend allocator used by soap_new_ns1__deletePublicMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__deletePublicMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__deletePublicMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:158 */
#ifndef SOAP_TYPE_ns1__registerServer
#define SOAP_TYPE_ns1__registerServer (14)
/* complex XSD type 'ns1:registerServer': */
class SOAP_CMAC ns1__registerServer {
      public:
        /// Required element 'arg0' of XSD type 'xsd:int'
        int arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__registerServer
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__registerServer; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__registerServer, default initialized and not managed by a soap context
        virtual ns1__registerServer *soap_alloc(void) const { return SOAP_NEW(ns1__registerServer); }
      public:
        /// Constructor with initializations
        ns1__registerServer()
        {
          arg0 = (int)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__registerServer() { }
        /// Friend allocator used by soap_new_ns1__registerServer(struct soap*, int)
        friend SOAP_FMAC1 ns1__registerServer * SOAP_FMAC2 soap_instantiate_ns1__registerServer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:161 */
#ifndef SOAP_TYPE_ns1__registerServerResponse
#define SOAP_TYPE_ns1__registerServerResponse (15)
/* complex XSD type 'ns1:registerServerResponse': */
class SOAP_CMAC ns1__registerServerResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        char *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__registerServerResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__registerServerResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__registerServerResponse, default initialized and not managed by a soap context
        virtual ns1__registerServerResponse *soap_alloc(void) const { return SOAP_NEW(ns1__registerServerResponse); }
      public:
        /// Constructor with initializations
        ns1__registerServerResponse()
        {
          return_ = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__registerServerResponse() { }
        /// Friend allocator used by soap_new_ns1__registerServerResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__registerServerResponse * SOAP_FMAC2 soap_instantiate_ns1__registerServerResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:164 */
#ifndef SOAP_TYPE_ns1__modifyPublicMessage
#define SOAP_TYPE_ns1__modifyPublicMessage (16)
/* complex XSD type 'ns1:modifyPublicMessage': */
class SOAP_CMAC ns1__modifyPublicMessage {
      public:
        /// Required element 'arg0' of XSD type 'xsd:int'
        int arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        char *arg1;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__modifyPublicMessage
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__modifyPublicMessage; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__modifyPublicMessage, default initialized and not managed by a soap context
        virtual ns1__modifyPublicMessage *soap_alloc(void) const { return SOAP_NEW(ns1__modifyPublicMessage); }
      public:
        /// Constructor with initializations
        ns1__modifyPublicMessage()
        {
          arg0 = (int)0;
          arg1 = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__modifyPublicMessage() { }
        /// Friend allocator used by soap_new_ns1__modifyPublicMessage(struct soap*, int)
        friend SOAP_FMAC1 ns1__modifyPublicMessage * SOAP_FMAC2 soap_instantiate_ns1__modifyPublicMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:167 */
#ifndef SOAP_TYPE_ns1__modifyPublicMessageResponse
#define SOAP_TYPE_ns1__modifyPublicMessageResponse (17)
/* complex XSD type 'ns1:modifyPublicMessageResponse': */
class SOAP_CMAC ns1__modifyPublicMessageResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        char *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__modifyPublicMessageResponse
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__modifyPublicMessageResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__modifyPublicMessageResponse, default initialized and not managed by a soap context
        virtual ns1__modifyPublicMessageResponse *soap_alloc(void) const { return SOAP_NEW(ns1__modifyPublicMessageResponse); }
      public:
        /// Constructor with initializations
        ns1__modifyPublicMessageResponse()
        {
          return_ = (char *)0;
          soap = (struct soap *)0;
        }
        virtual ~ns1__modifyPublicMessageResponse() { }
        /// Friend allocator used by soap_new_ns1__modifyPublicMessageResponse(struct soap*, int)
        friend SOAP_FMAC1 ns1__modifyPublicMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__modifyPublicMessageResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:647 */
#ifndef SOAP_TYPE___ns1__deletePublicMessage
#define SOAP_TYPE___ns1__deletePublicMessage (28)
/* Wrapper: */
struct SOAP_CMAC __ns1__deletePublicMessage {
      public:
        /** Optional element 'ns1:deletePublicMessage' of XSD type 'ns1:deletePublicMessage' */
        ns1__deletePublicMessage *ns1__deletePublicMessage_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__deletePublicMessage */
        int soap_type() const { return SOAP_TYPE___ns1__deletePublicMessage; }
        /** Constructor with member initializations */
        __ns1__deletePublicMessage()
        {
          ns1__deletePublicMessage_ = (ns1__deletePublicMessage *)0;
        }
        /** Friend allocator used by soap_new___ns1__deletePublicMessage(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__deletePublicMessage * SOAP_FMAC2 soap_instantiate___ns1__deletePublicMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:714 */
#ifndef SOAP_TYPE___ns1__modifyPublicMessage
#define SOAP_TYPE___ns1__modifyPublicMessage (32)
/* Wrapper: */
struct SOAP_CMAC __ns1__modifyPublicMessage {
      public:
        /** Optional element 'ns1:modifyPublicMessage' of XSD type 'ns1:modifyPublicMessage' */
        ns1__modifyPublicMessage *ns1__modifyPublicMessage_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__modifyPublicMessage */
        int soap_type() const { return SOAP_TYPE___ns1__modifyPublicMessage; }
        /** Constructor with member initializations */
        __ns1__modifyPublicMessage()
        {
          ns1__modifyPublicMessage_ = (ns1__modifyPublicMessage *)0;
        }
        /** Friend allocator used by soap_new___ns1__modifyPublicMessage(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__modifyPublicMessage * SOAP_FMAC2 soap_instantiate___ns1__modifyPublicMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:781 */
#ifndef SOAP_TYPE___ns1__receiveMessage
#define SOAP_TYPE___ns1__receiveMessage (36)
/* Wrapper: */
struct SOAP_CMAC __ns1__receiveMessage {
      public:
        /** Optional element 'ns1:receiveMessage' of XSD type 'ns1:receiveMessage' */
        ns1__receiveMessage *ns1__receiveMessage_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__receiveMessage */
        int soap_type() const { return SOAP_TYPE___ns1__receiveMessage; }
        /** Constructor with member initializations */
        __ns1__receiveMessage()
        {
          ns1__receiveMessage_ = (ns1__receiveMessage *)0;
        }
        /** Friend allocator used by soap_new___ns1__receiveMessage(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__receiveMessage * SOAP_FMAC2 soap_instantiate___ns1__receiveMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:848 */
#ifndef SOAP_TYPE___ns1__registerServer
#define SOAP_TYPE___ns1__registerServer (40)
/* Wrapper: */
struct SOAP_CMAC __ns1__registerServer {
      public:
        /** Optional element 'ns1:registerServer' of XSD type 'ns1:registerServer' */
        ns1__registerServer *ns1__registerServer_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__registerServer */
        int soap_type() const { return SOAP_TYPE___ns1__registerServer; }
        /** Constructor with member initializations */
        __ns1__registerServer()
        {
          ns1__registerServer_ = (ns1__registerServer *)0;
        }
        /** Friend allocator used by soap_new___ns1__registerServer(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__registerServer * SOAP_FMAC2 soap_instantiate___ns1__registerServer(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:915 */
#ifndef SOAP_TYPE___ns1__receiveSoapableMessage
#define SOAP_TYPE___ns1__receiveSoapableMessage (44)
/* Wrapper: */
struct SOAP_CMAC __ns1__receiveSoapableMessage {
      public:
        /** Optional element 'ns1:receiveSoapableMessage' of XSD type 'ns1:receiveSoapableMessage' */
        ns1__receiveSoapableMessage *ns1__receiveSoapableMessage_;
      public:
        /** Return unique type id SOAP_TYPE___ns1__receiveSoapableMessage */
        int soap_type() const { return SOAP_TYPE___ns1__receiveSoapableMessage; }
        /** Constructor with member initializations */
        __ns1__receiveSoapableMessage()
        {
          ns1__receiveSoapableMessage_ = (ns1__receiveSoapableMessage *)0;
        }
        /** Friend allocator used by soap_new___ns1__receiveSoapableMessage(struct soap*, int) */
        friend SOAP_FMAC1 __ns1__receiveSoapableMessage * SOAP_FMAC2 soap_instantiate___ns1__receiveSoapableMessage(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:1000 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (45)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        {
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Header(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:1000 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (46)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code()
        {
          SOAP_ENV__Value = (char *)0;
          SOAP_ENV__Subcode = (struct SOAP_ENV__Code *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Code(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:1000 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail()
        {
          __any = (char *)0;
          __type = 0;
          fault = NULL;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Detail(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:1000 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (51)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason()
        {
          SOAP_ENV__Text = (char *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Reason(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:1000 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault()
        {
          faultcode = (char *)0;
          faultstring = (char *)0;
          faultactor = (char *)0;
          detail = (struct SOAP_ENV__Detail *)0;
          SOAP_ENV__Code = (struct SOAP_ENV__Code *)0;
          SOAP_ENV__Reason = (struct SOAP_ENV__Reason *)0;
          SOAP_ENV__Node = (char *)0;
          SOAP_ENV__Role = (char *)0;
          SOAP_ENV__Detail = (struct SOAP_ENV__Detail *)0;
        }
        /** Friend allocator used by soap_new_SOAP_ENV__Fault(struct soap*, int) */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:119 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h:119 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (20)
#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_dateTime
#define SOAP_TYPE_dateTime (23)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (21)
#endif

/* ns1__modifyPublicMessageResponse has binding name 'ns1__modifyPublicMessageResponse' for type 'ns1:modifyPublicMessageResponse' */
#ifndef SOAP_TYPE_ns1__modifyPublicMessageResponse
#define SOAP_TYPE_ns1__modifyPublicMessageResponse (17)
#endif

/* ns1__modifyPublicMessage has binding name 'ns1__modifyPublicMessage' for type 'ns1:modifyPublicMessage' */
#ifndef SOAP_TYPE_ns1__modifyPublicMessage
#define SOAP_TYPE_ns1__modifyPublicMessage (16)
#endif

/* ns1__registerServerResponse has binding name 'ns1__registerServerResponse' for type 'ns1:registerServerResponse' */
#ifndef SOAP_TYPE_ns1__registerServerResponse
#define SOAP_TYPE_ns1__registerServerResponse (15)
#endif

/* ns1__registerServer has binding name 'ns1__registerServer' for type 'ns1:registerServer' */
#ifndef SOAP_TYPE_ns1__registerServer
#define SOAP_TYPE_ns1__registerServer (14)
#endif

/* ns1__deletePublicMessageResponse has binding name 'ns1__deletePublicMessageResponse' for type 'ns1:deletePublicMessageResponse' */
#ifndef SOAP_TYPE_ns1__deletePublicMessageResponse
#define SOAP_TYPE_ns1__deletePublicMessageResponse (13)
#endif

/* ns1__deletePublicMessage has binding name 'ns1__deletePublicMessage' for type 'ns1:deletePublicMessage' */
#ifndef SOAP_TYPE_ns1__deletePublicMessage
#define SOAP_TYPE_ns1__deletePublicMessage (12)
#endif

/* ns1__receiveSoapableMessageResponse has binding name 'ns1__receiveSoapableMessageResponse' for type 'ns1:receiveSoapableMessageResponse' */
#ifndef SOAP_TYPE_ns1__receiveSoapableMessageResponse
#define SOAP_TYPE_ns1__receiveSoapableMessageResponse (11)
#endif

/* ns1__soapableMessage has binding name 'ns1__soapableMessage' for type 'ns1:soapableMessage' */
#ifndef SOAP_TYPE_ns1__soapableMessage
#define SOAP_TYPE_ns1__soapableMessage (10)
#endif

/* ns1__receiveSoapableMessage has binding name 'ns1__receiveSoapableMessage' for type 'ns1:receiveSoapableMessage' */
#ifndef SOAP_TYPE_ns1__receiveSoapableMessage
#define SOAP_TYPE_ns1__receiveSoapableMessage (9)
#endif

/* ns1__receiveMessageResponse has binding name 'ns1__receiveMessageResponse' for type 'ns1:receiveMessageResponse' */
#ifndef SOAP_TYPE_ns1__receiveMessageResponse
#define SOAP_TYPE_ns1__receiveMessageResponse (8)
#endif

/* ns1__receiveMessage has binding name 'ns1__receiveMessage' for type 'ns1:receiveMessage' */
#ifndef SOAP_TYPE_ns1__receiveMessage
#define SOAP_TYPE_ns1__receiveMessage (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (52)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (51)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (46)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (45)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (54)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (53)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (47)
#endif

/* ns1__receiveSoapableMessage * has binding name 'PointerTons1__receiveSoapableMessage' for type 'ns1:receiveSoapableMessage' */
#ifndef SOAP_TYPE_PointerTons1__receiveSoapableMessage
#define SOAP_TYPE_PointerTons1__receiveSoapableMessage (41)
#endif

/* ns1__registerServer * has binding name 'PointerTons1__registerServer' for type 'ns1:registerServer' */
#ifndef SOAP_TYPE_PointerTons1__registerServer
#define SOAP_TYPE_PointerTons1__registerServer (37)
#endif

/* ns1__receiveMessage * has binding name 'PointerTons1__receiveMessage' for type 'ns1:receiveMessage' */
#ifndef SOAP_TYPE_PointerTons1__receiveMessage
#define SOAP_TYPE_PointerTons1__receiveMessage (33)
#endif

/* ns1__modifyPublicMessage * has binding name 'PointerTons1__modifyPublicMessage' for type 'ns1:modifyPublicMessage' */
#ifndef SOAP_TYPE_PointerTons1__modifyPublicMessage
#define SOAP_TYPE_PointerTons1__modifyPublicMessage (29)
#endif

/* ns1__deletePublicMessage * has binding name 'PointerTons1__deletePublicMessage' for type 'ns1:deletePublicMessage' */
#ifndef SOAP_TYPE_PointerTons1__deletePublicMessage
#define SOAP_TYPE_PointerTons1__deletePublicMessage (25)
#endif

/* time_t * has binding name 'PointerTodateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_PointerTodateTime
#define SOAP_TYPE_PointerTodateTime (24)
#endif

/* int * has binding name 'PointerToint' for type 'xsd:int' */
#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (22)
#endif

/* ns1__soapableMessage * has binding name 'PointerTons1__soapableMessage' for type 'ns1:soapableMessage' */
#ifndef SOAP_TYPE_PointerTons1__soapableMessage
#define SOAP_TYPE_PointerTons1__soapableMessage (19)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
