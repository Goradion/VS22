/* soapC.cpp
   Generated by gSOAP 2.8.44 for F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.44 2017-03-17 02:08:58 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_dateTime:
		return soap_in_dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		return soap_in_ns1__modifyPublicMessageResponse(soap, NULL, NULL, "ns1:modifyPublicMessageResponse");
	case SOAP_TYPE_ns1__modifyPublicMessage:
		return soap_in_ns1__modifyPublicMessage(soap, NULL, NULL, "ns1:modifyPublicMessage");
	case SOAP_TYPE_ns1__registerServerResponse:
		return soap_in_ns1__registerServerResponse(soap, NULL, NULL, "ns1:registerServerResponse");
	case SOAP_TYPE_ns1__registerServer:
		return soap_in_ns1__registerServer(soap, NULL, NULL, "ns1:registerServer");
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		return soap_in_ns1__deletePublicMessageResponse(soap, NULL, NULL, "ns1:deletePublicMessageResponse");
	case SOAP_TYPE_ns1__deletePublicMessage:
		return soap_in_ns1__deletePublicMessage(soap, NULL, NULL, "ns1:deletePublicMessage");
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		return soap_in_ns1__receiveSoapableMessageResponse(soap, NULL, NULL, "ns1:receiveSoapableMessageResponse");
	case SOAP_TYPE_ns1__soapableMessage:
		return soap_in_ns1__soapableMessage(soap, NULL, NULL, "ns1:soapableMessage");
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		return soap_in_ns1__receiveSoapableMessage(soap, NULL, NULL, "ns1:receiveSoapableMessage");
	case SOAP_TYPE_ns1__receiveMessageResponse:
		return soap_in_ns1__receiveMessageResponse(soap, NULL, NULL, "ns1:receiveMessageResponse");
	case SOAP_TYPE_ns1__receiveMessage:
		return soap_in_ns1__receiveMessage(soap, NULL, NULL, "ns1:receiveMessage");
	case SOAP_TYPE_PointerTons1__receiveSoapableMessage:
		return soap_in_PointerTons1__receiveSoapableMessage(soap, NULL, NULL, "ns1:receiveSoapableMessage");
	case SOAP_TYPE_PointerTons1__registerServer:
		return soap_in_PointerTons1__registerServer(soap, NULL, NULL, "ns1:registerServer");
	case SOAP_TYPE_PointerTons1__receiveMessage:
		return soap_in_PointerTons1__receiveMessage(soap, NULL, NULL, "ns1:receiveMessage");
	case SOAP_TYPE_PointerTons1__modifyPublicMessage:
		return soap_in_PointerTons1__modifyPublicMessage(soap, NULL, NULL, "ns1:modifyPublicMessage");
	case SOAP_TYPE_PointerTons1__deletePublicMessage:
		return soap_in_PointerTons1__deletePublicMessage(soap, NULL, NULL, "ns1:deletePublicMessage");
	case SOAP_TYPE_PointerTodateTime:
		return soap_in_PointerTodateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons1__soapableMessage:
		return soap_in_PointerTons1__soapableMessage(soap, NULL, NULL, "ns1:soapableMessage");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:modifyPublicMessageResponse"))
		{	*type = SOAP_TYPE_ns1__modifyPublicMessageResponse;
			return soap_in_ns1__modifyPublicMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:modifyPublicMessage"))
		{	*type = SOAP_TYPE_ns1__modifyPublicMessage;
			return soap_in_ns1__modifyPublicMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:registerServerResponse"))
		{	*type = SOAP_TYPE_ns1__registerServerResponse;
			return soap_in_ns1__registerServerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:registerServer"))
		{	*type = SOAP_TYPE_ns1__registerServer;
			return soap_in_ns1__registerServer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deletePublicMessageResponse"))
		{	*type = SOAP_TYPE_ns1__deletePublicMessageResponse;
			return soap_in_ns1__deletePublicMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:deletePublicMessage"))
		{	*type = SOAP_TYPE_ns1__deletePublicMessage;
			return soap_in_ns1__deletePublicMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:receiveSoapableMessageResponse"))
		{	*type = SOAP_TYPE_ns1__receiveSoapableMessageResponse;
			return soap_in_ns1__receiveSoapableMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:soapableMessage"))
		{	*type = SOAP_TYPE_ns1__soapableMessage;
			return soap_in_ns1__soapableMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:receiveSoapableMessage"))
		{	*type = SOAP_TYPE_ns1__receiveSoapableMessage;
			return soap_in_ns1__receiveSoapableMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:receiveMessageResponse"))
		{	*type = SOAP_TYPE_ns1__receiveMessageResponse;
			return soap_in_ns1__receiveMessageResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:receiveMessage"))
		{	*type = SOAP_TYPE_ns1__receiveMessage;
			return soap_in_ns1__receiveMessage(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_dateTime;
			return soap_in_dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		return ((ns1__modifyPublicMessageResponse *)ptr)->soap_out(soap, tag, id, "ns1:modifyPublicMessageResponse");
	case SOAP_TYPE_ns1__modifyPublicMessage:
		return ((ns1__modifyPublicMessage *)ptr)->soap_out(soap, tag, id, "ns1:modifyPublicMessage");
	case SOAP_TYPE_ns1__registerServerResponse:
		return ((ns1__registerServerResponse *)ptr)->soap_out(soap, tag, id, "ns1:registerServerResponse");
	case SOAP_TYPE_ns1__registerServer:
		return ((ns1__registerServer *)ptr)->soap_out(soap, tag, id, "ns1:registerServer");
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		return ((ns1__deletePublicMessageResponse *)ptr)->soap_out(soap, tag, id, "ns1:deletePublicMessageResponse");
	case SOAP_TYPE_ns1__deletePublicMessage:
		return ((ns1__deletePublicMessage *)ptr)->soap_out(soap, tag, id, "ns1:deletePublicMessage");
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		return ((ns1__receiveSoapableMessageResponse *)ptr)->soap_out(soap, tag, id, "ns1:receiveSoapableMessageResponse");
	case SOAP_TYPE_ns1__soapableMessage:
		return ((ns1__soapableMessage *)ptr)->soap_out(soap, tag, id, "ns1:soapableMessage");
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		return ((ns1__receiveSoapableMessage *)ptr)->soap_out(soap, tag, id, "ns1:receiveSoapableMessage");
	case SOAP_TYPE_ns1__receiveMessageResponse:
		return ((ns1__receiveMessageResponse *)ptr)->soap_out(soap, tag, id, "ns1:receiveMessageResponse");
	case SOAP_TYPE_ns1__receiveMessage:
		return ((ns1__receiveMessage *)ptr)->soap_out(soap, tag, id, "ns1:receiveMessage");
	case SOAP_TYPE_PointerTons1__receiveSoapableMessage:
		return soap_out_PointerTons1__receiveSoapableMessage(soap, tag, id, (ns1__receiveSoapableMessage *const*)ptr, "ns1:receiveSoapableMessage");
	case SOAP_TYPE_PointerTons1__registerServer:
		return soap_out_PointerTons1__registerServer(soap, tag, id, (ns1__registerServer *const*)ptr, "ns1:registerServer");
	case SOAP_TYPE_PointerTons1__receiveMessage:
		return soap_out_PointerTons1__receiveMessage(soap, tag, id, (ns1__receiveMessage *const*)ptr, "ns1:receiveMessage");
	case SOAP_TYPE_PointerTons1__modifyPublicMessage:
		return soap_out_PointerTons1__modifyPublicMessage(soap, tag, id, (ns1__modifyPublicMessage *const*)ptr, "ns1:modifyPublicMessage");
	case SOAP_TYPE_PointerTons1__deletePublicMessage:
		return soap_out_PointerTons1__deletePublicMessage(soap, tag, id, (ns1__deletePublicMessage *const*)ptr, "ns1:deletePublicMessage");
	case SOAP_TYPE_PointerTodateTime:
		return soap_out_PointerTodateTime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons1__soapableMessage:
		return soap_out_PointerTons1__soapableMessage(soap, tag, id, (ns1__soapableMessage *const*)ptr, "ns1:soapableMessage");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		((ns1__modifyPublicMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__modifyPublicMessage:
		((ns1__modifyPublicMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__registerServerResponse:
		((ns1__registerServerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__registerServer:
		((ns1__registerServer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		((ns1__deletePublicMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__deletePublicMessage:
		((ns1__deletePublicMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		((ns1__receiveSoapableMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__soapableMessage:
		((ns1__soapableMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		((ns1__receiveSoapableMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__receiveMessageResponse:
		((ns1__receiveMessageResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__receiveMessage:
		((ns1__receiveMessage *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__receiveSoapableMessage:
		soap_serialize___ns1__receiveSoapableMessage(soap, (const struct __ns1__receiveSoapableMessage *)ptr);
		break;
	case SOAP_TYPE___ns1__registerServer:
		soap_serialize___ns1__registerServer(soap, (const struct __ns1__registerServer *)ptr);
		break;
	case SOAP_TYPE___ns1__receiveMessage:
		soap_serialize___ns1__receiveMessage(soap, (const struct __ns1__receiveMessage *)ptr);
		break;
	case SOAP_TYPE___ns1__modifyPublicMessage:
		soap_serialize___ns1__modifyPublicMessage(soap, (const struct __ns1__modifyPublicMessage *)ptr);
		break;
	case SOAP_TYPE___ns1__deletePublicMessage:
		soap_serialize___ns1__deletePublicMessage(soap, (const struct __ns1__deletePublicMessage *)ptr);
		break;
	case SOAP_TYPE_PointerTons1__receiveSoapableMessage:
		soap_serialize_PointerTons1__receiveSoapableMessage(soap, (ns1__receiveSoapableMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__registerServer:
		soap_serialize_PointerTons1__registerServer(soap, (ns1__registerServer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__receiveMessage:
		soap_serialize_PointerTons1__receiveMessage(soap, (ns1__receiveMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__modifyPublicMessage:
		soap_serialize_PointerTons1__modifyPublicMessage(soap, (ns1__modifyPublicMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__deletePublicMessage:
		soap_serialize_PointerTons1__deletePublicMessage(soap, (ns1__deletePublicMessage *const*)ptr);
		break;
	case SOAP_TYPE_PointerTodateTime:
		soap_serialize_PointerTodateTime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__soapableMessage:
		soap_serialize_PointerTons1__soapableMessage(soap, (ns1__soapableMessage *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns1__receiveMessage:
		return (void*)soap_instantiate_ns1__receiveMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__receiveMessageResponse:
		return (void*)soap_instantiate_ns1__receiveMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		return (void*)soap_instantiate_ns1__receiveSoapableMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__soapableMessage:
		return (void*)soap_instantiate_ns1__soapableMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		return (void*)soap_instantiate_ns1__receiveSoapableMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deletePublicMessage:
		return (void*)soap_instantiate_ns1__deletePublicMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		return (void*)soap_instantiate_ns1__deletePublicMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__registerServer:
		return (void*)soap_instantiate_ns1__registerServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__registerServerResponse:
		return (void*)soap_instantiate_ns1__registerServerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__modifyPublicMessage:
		return (void*)soap_instantiate_ns1__modifyPublicMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		return (void*)soap_instantiate_ns1__modifyPublicMessageResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__deletePublicMessage:
		return (void*)soap_instantiate___ns1__deletePublicMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__modifyPublicMessage:
		return (void*)soap_instantiate___ns1__modifyPublicMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__receiveMessage:
		return (void*)soap_instantiate___ns1__receiveMessage(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__registerServer:
		return (void*)soap_instantiate___ns1__registerServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__receiveSoapableMessage:
		return (void*)soap_instantiate___ns1__receiveSoapableMessage(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__receiveMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__receiveMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__receiveMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__receiveMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__receiveMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__receiveMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__receiveSoapableMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__receiveSoapableMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__soapableMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__soapableMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__soapableMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__receiveSoapableMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__receiveSoapableMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deletePublicMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deletePublicMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deletePublicMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__deletePublicMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__deletePublicMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__registerServer:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__registerServer*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__registerServer*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__registerServerResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__registerServerResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__registerServerResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__modifyPublicMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__modifyPublicMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__modifyPublicMessage*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__modifyPublicMessageResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__modifyPublicMessageResponse*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__deletePublicMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__deletePublicMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__deletePublicMessage*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__modifyPublicMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__modifyPublicMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__modifyPublicMessage*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__receiveMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__receiveMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__receiveMessage*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__registerServer:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__registerServer*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__registerServer*>(p->ptr));
		break;
	case SOAP_TYPE___ns1__receiveSoapableMessage:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __ns1__receiveSoapableMessage*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __ns1__receiveSoapableMessage*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_ns1__receiveMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__receiveMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__receiveMessage*)p = *(ns1__receiveMessage*)q;
		break;
	case SOAP_TYPE_ns1__receiveMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__receiveMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__receiveMessageResponse*)p = *(ns1__receiveMessageResponse*)q;
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__receiveSoapableMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__receiveSoapableMessage*)p = *(ns1__receiveSoapableMessage*)q;
		break;
	case SOAP_TYPE_ns1__soapableMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__soapableMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__soapableMessage*)p = *(ns1__soapableMessage*)q;
		break;
	case SOAP_TYPE_ns1__receiveSoapableMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__receiveSoapableMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__receiveSoapableMessageResponse*)p = *(ns1__receiveSoapableMessageResponse*)q;
		break;
	case SOAP_TYPE_ns1__deletePublicMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deletePublicMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deletePublicMessage*)p = *(ns1__deletePublicMessage*)q;
		break;
	case SOAP_TYPE_ns1__deletePublicMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__deletePublicMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__deletePublicMessageResponse*)p = *(ns1__deletePublicMessageResponse*)q;
		break;
	case SOAP_TYPE_ns1__registerServer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__registerServer type=%d location=%p object=%p\n", t, p, q));
		*(ns1__registerServer*)p = *(ns1__registerServer*)q;
		break;
	case SOAP_TYPE_ns1__registerServerResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__registerServerResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__registerServerResponse*)p = *(ns1__registerServerResponse*)q;
		break;
	case SOAP_TYPE_ns1__modifyPublicMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__modifyPublicMessage type=%d location=%p object=%p\n", t, p, q));
		*(ns1__modifyPublicMessage*)p = *(ns1__modifyPublicMessage*)q;
		break;
	case SOAP_TYPE_ns1__modifyPublicMessageResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__modifyPublicMessageResponse type=%d location=%p object=%p\n", t, p, q));
		*(ns1__modifyPublicMessageResponse*)p = *(ns1__modifyPublicMessageResponse*)q;
		break;
	case SOAP_TYPE___ns1__deletePublicMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__deletePublicMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__deletePublicMessage*)p = *(struct __ns1__deletePublicMessage*)q;
		break;
	case SOAP_TYPE___ns1__modifyPublicMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__modifyPublicMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__modifyPublicMessage*)p = *(struct __ns1__modifyPublicMessage*)q;
		break;
	case SOAP_TYPE___ns1__receiveMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__receiveMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__receiveMessage*)p = *(struct __ns1__receiveMessage*)q;
		break;
	case SOAP_TYPE___ns1__registerServer:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__registerServer type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__registerServer*)p = *(struct __ns1__registerServer*)q;
		break;
	case SOAP_TYPE___ns1__receiveSoapableMessage:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__receiveSoapableMessage type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__receiveSoapableMessage*)p = *(struct __ns1__receiveSoapableMessage*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__modifyPublicMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__modifyPublicMessageResponse::return_);
	/* transient soap skipped */
}

void ns1__modifyPublicMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__modifyPublicMessageResponse::return_);
#endif
}

int ns1__modifyPublicMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__modifyPublicMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__modifyPublicMessageResponse(struct soap *soap, const char *tag, int id, const ns1__modifyPublicMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__modifyPublicMessageResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__modifyPublicMessageResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__modifyPublicMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__modifyPublicMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__modifyPublicMessageResponse * SOAP_FMAC4 soap_in_ns1__modifyPublicMessageResponse(struct soap *soap, const char *tag, ns1__modifyPublicMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__modifyPublicMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__modifyPublicMessageResponse, sizeof(ns1__modifyPublicMessageResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__modifyPublicMessageResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__modifyPublicMessageResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", (char**)&a->ns1__modifyPublicMessageResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__modifyPublicMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__modifyPublicMessageResponse, SOAP_TYPE_ns1__modifyPublicMessageResponse, sizeof(ns1__modifyPublicMessageResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__modifyPublicMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__modifyPublicMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__modifyPublicMessageResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__modifyPublicMessageResponse *p;
	size_t k = sizeof(ns1__modifyPublicMessageResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__modifyPublicMessageResponse);
		if (p)
			((ns1__modifyPublicMessageResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__modifyPublicMessageResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__modifyPublicMessageResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__modifyPublicMessageResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__modifyPublicMessageResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__modifyPublicMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__modifyPublicMessageResponse(soap, tag ? tag : "ns1:modifyPublicMessageResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__modifyPublicMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__modifyPublicMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__modifyPublicMessageResponse * SOAP_FMAC4 soap_get_ns1__modifyPublicMessageResponse(struct soap *soap, ns1__modifyPublicMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__modifyPublicMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__modifyPublicMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__modifyPublicMessage::arg0);
	soap_default_string(soap, &this->ns1__modifyPublicMessage::arg1);
	/* transient soap skipped */
}

void ns1__modifyPublicMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__modifyPublicMessage::arg0, SOAP_TYPE_int);
	soap_serialize_string(soap, (char*const*)&this->ns1__modifyPublicMessage::arg1);
#endif
}

int ns1__modifyPublicMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__modifyPublicMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__modifyPublicMessage(struct soap *soap, const char *tag, int id, const ns1__modifyPublicMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__modifyPublicMessage), type))
		return soap->error;
	if (soap_out_int(soap, "arg0", -1, &a->ns1__modifyPublicMessage::arg0, ""))
		return soap->error;
	if (soap_out_string(soap, "arg1", -1, (char*const*)&a->ns1__modifyPublicMessage::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__modifyPublicMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__modifyPublicMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__modifyPublicMessage * SOAP_FMAC4 soap_in_ns1__modifyPublicMessage(struct soap *soap, const char *tag, ns1__modifyPublicMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__modifyPublicMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__modifyPublicMessage, sizeof(ns1__modifyPublicMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__modifyPublicMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__modifyPublicMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg0", &a->ns1__modifyPublicMessage::arg0, "xsd:int"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg1", (char**)&a->ns1__modifyPublicMessage::arg1, "xsd:string"))
				{	soap_flag_arg11--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg01 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__modifyPublicMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__modifyPublicMessage, SOAP_TYPE_ns1__modifyPublicMessage, sizeof(ns1__modifyPublicMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__modifyPublicMessage * SOAP_FMAC2 soap_instantiate_ns1__modifyPublicMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__modifyPublicMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__modifyPublicMessage *p;
	size_t k = sizeof(ns1__modifyPublicMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__modifyPublicMessage);
		if (p)
			((ns1__modifyPublicMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__modifyPublicMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__modifyPublicMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__modifyPublicMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__modifyPublicMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__modifyPublicMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__modifyPublicMessage(soap, tag ? tag : "ns1:modifyPublicMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__modifyPublicMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__modifyPublicMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__modifyPublicMessage * SOAP_FMAC4 soap_get_ns1__modifyPublicMessage(struct soap *soap, ns1__modifyPublicMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__modifyPublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__registerServerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__registerServerResponse::return_);
	/* transient soap skipped */
}

void ns1__registerServerResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__registerServerResponse::return_);
#endif
}

int ns1__registerServerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__registerServerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerServerResponse(struct soap *soap, const char *tag, int id, const ns1__registerServerResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__registerServerResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__registerServerResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__registerServerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__registerServerResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__registerServerResponse * SOAP_FMAC4 soap_in_ns1__registerServerResponse(struct soap *soap, const char *tag, ns1__registerServerResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__registerServerResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__registerServerResponse, sizeof(ns1__registerServerResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__registerServerResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__registerServerResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", (char**)&a->ns1__registerServerResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__registerServerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__registerServerResponse, SOAP_TYPE_ns1__registerServerResponse, sizeof(ns1__registerServerResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__registerServerResponse * SOAP_FMAC2 soap_instantiate_ns1__registerServerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__registerServerResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__registerServerResponse *p;
	size_t k = sizeof(ns1__registerServerResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__registerServerResponse);
		if (p)
			((ns1__registerServerResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__registerServerResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__registerServerResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__registerServerResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__registerServerResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__registerServerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__registerServerResponse(soap, tag ? tag : "ns1:registerServerResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__registerServerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__registerServerResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__registerServerResponse * SOAP_FMAC4 soap_get_ns1__registerServerResponse(struct soap *soap, ns1__registerServerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__registerServerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__registerServer::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__registerServer::arg0);
	/* transient soap skipped */
}

void ns1__registerServer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__registerServer::arg0, SOAP_TYPE_int);
#endif
}

int ns1__registerServer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__registerServer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__registerServer(struct soap *soap, const char *tag, int id, const ns1__registerServer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__registerServer), type))
		return soap->error;
	if (soap_out_int(soap, "arg0", -1, &a->ns1__registerServer::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__registerServer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__registerServer(soap, tag, this, type);
}

SOAP_FMAC3 ns1__registerServer * SOAP_FMAC4 soap_in_ns1__registerServer(struct soap *soap, const char *tag, ns1__registerServer *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__registerServer *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__registerServer, sizeof(ns1__registerServer), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__registerServer)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__registerServer *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg0", &a->ns1__registerServer::arg0, "xsd:int"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg01 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__registerServer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__registerServer, SOAP_TYPE_ns1__registerServer, sizeof(ns1__registerServer), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__registerServer * SOAP_FMAC2 soap_instantiate_ns1__registerServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__registerServer(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__registerServer *p;
	size_t k = sizeof(ns1__registerServer);
	if (n < 0)
	{	p = SOAP_NEW(ns1__registerServer);
		if (p)
			((ns1__registerServer*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__registerServer, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__registerServer*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__registerServer location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__registerServer, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__registerServer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__registerServer(soap, tag ? tag : "ns1:registerServer", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__registerServer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__registerServer(soap, this, tag, type);
}

SOAP_FMAC3 ns1__registerServer * SOAP_FMAC4 soap_get_ns1__registerServer(struct soap *soap, ns1__registerServer *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__registerServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deletePublicMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__deletePublicMessageResponse::return_);
	/* transient soap skipped */
}

void ns1__deletePublicMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__deletePublicMessageResponse::return_);
#endif
}

int ns1__deletePublicMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deletePublicMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deletePublicMessageResponse(struct soap *soap, const char *tag, int id, const ns1__deletePublicMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deletePublicMessageResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__deletePublicMessageResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deletePublicMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deletePublicMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deletePublicMessageResponse * SOAP_FMAC4 soap_in_ns1__deletePublicMessageResponse(struct soap *soap, const char *tag, ns1__deletePublicMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deletePublicMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deletePublicMessageResponse, sizeof(ns1__deletePublicMessageResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deletePublicMessageResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deletePublicMessageResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", (char**)&a->ns1__deletePublicMessageResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__deletePublicMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deletePublicMessageResponse, SOAP_TYPE_ns1__deletePublicMessageResponse, sizeof(ns1__deletePublicMessageResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deletePublicMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__deletePublicMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deletePublicMessageResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deletePublicMessageResponse *p;
	size_t k = sizeof(ns1__deletePublicMessageResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deletePublicMessageResponse);
		if (p)
			((ns1__deletePublicMessageResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deletePublicMessageResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deletePublicMessageResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deletePublicMessageResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deletePublicMessageResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deletePublicMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deletePublicMessageResponse(soap, tag ? tag : "ns1:deletePublicMessageResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deletePublicMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deletePublicMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deletePublicMessageResponse * SOAP_FMAC4 soap_get_ns1__deletePublicMessageResponse(struct soap *soap, ns1__deletePublicMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deletePublicMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__deletePublicMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__deletePublicMessage::arg0);
	soap_default_int(soap, &this->ns1__deletePublicMessage::arg1);
	/* transient soap skipped */
}

void ns1__deletePublicMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__deletePublicMessage::arg0, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__deletePublicMessage::arg1, SOAP_TYPE_int);
#endif
}

int ns1__deletePublicMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__deletePublicMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__deletePublicMessage(struct soap *soap, const char *tag, int id, const ns1__deletePublicMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__deletePublicMessage), type))
		return soap->error;
	if (soap_out_int(soap, "arg0", -1, &a->ns1__deletePublicMessage::arg0, ""))
		return soap->error;
	if (soap_out_int(soap, "arg1", -1, &a->ns1__deletePublicMessage::arg1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__deletePublicMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__deletePublicMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__deletePublicMessage * SOAP_FMAC4 soap_in_ns1__deletePublicMessage(struct soap *soap, const char *tag, ns1__deletePublicMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__deletePublicMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__deletePublicMessage, sizeof(ns1__deletePublicMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__deletePublicMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__deletePublicMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg0", &a->ns1__deletePublicMessage::arg0, "xsd:int"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg1", &a->ns1__deletePublicMessage::arg1, "xsd:int"))
				{	soap_flag_arg11--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg01 > 0 || soap_flag_arg11 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__deletePublicMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__deletePublicMessage, SOAP_TYPE_ns1__deletePublicMessage, sizeof(ns1__deletePublicMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__deletePublicMessage * SOAP_FMAC2 soap_instantiate_ns1__deletePublicMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__deletePublicMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__deletePublicMessage *p;
	size_t k = sizeof(ns1__deletePublicMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__deletePublicMessage);
		if (p)
			((ns1__deletePublicMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__deletePublicMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__deletePublicMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__deletePublicMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__deletePublicMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__deletePublicMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__deletePublicMessage(soap, tag ? tag : "ns1:deletePublicMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__deletePublicMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__deletePublicMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__deletePublicMessage * SOAP_FMAC4 soap_get_ns1__deletePublicMessage(struct soap *soap, ns1__deletePublicMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__deletePublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__receiveSoapableMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__receiveSoapableMessageResponse::return_);
	/* transient soap skipped */
}

void ns1__receiveSoapableMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__receiveSoapableMessageResponse::return_);
#endif
}

int ns1__receiveSoapableMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__receiveSoapableMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__receiveSoapableMessageResponse(struct soap *soap, const char *tag, int id, const ns1__receiveSoapableMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__receiveSoapableMessageResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__receiveSoapableMessageResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__receiveSoapableMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__receiveSoapableMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__receiveSoapableMessageResponse * SOAP_FMAC4 soap_in_ns1__receiveSoapableMessageResponse(struct soap *soap, const char *tag, ns1__receiveSoapableMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__receiveSoapableMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__receiveSoapableMessageResponse, sizeof(ns1__receiveSoapableMessageResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__receiveSoapableMessageResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__receiveSoapableMessageResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", (char**)&a->ns1__receiveSoapableMessageResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__receiveSoapableMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__receiveSoapableMessageResponse, SOAP_TYPE_ns1__receiveSoapableMessageResponse, sizeof(ns1__receiveSoapableMessageResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__receiveSoapableMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__receiveSoapableMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__receiveSoapableMessageResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__receiveSoapableMessageResponse *p;
	size_t k = sizeof(ns1__receiveSoapableMessageResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__receiveSoapableMessageResponse);
		if (p)
			((ns1__receiveSoapableMessageResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__receiveSoapableMessageResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__receiveSoapableMessageResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__receiveSoapableMessageResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__receiveSoapableMessageResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__receiveSoapableMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__receiveSoapableMessageResponse(soap, tag ? tag : "ns1:receiveSoapableMessageResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__receiveSoapableMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__receiveSoapableMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__receiveSoapableMessageResponse * SOAP_FMAC4 soap_get_ns1__receiveSoapableMessageResponse(struct soap *soap, ns1__receiveSoapableMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__receiveSoapableMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__soapableMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->ns1__soapableMessage::serialVersionUID);
	soap_default_int(soap, &this->ns1__soapableMessage::messageID);
	soap_default_int(soap, &this->ns1__soapableMessage::userID);
	soap_default_int(soap, &this->ns1__soapableMessage::abtNr);
	soap_default_string(soap, &this->ns1__soapableMessage::inhalt);
	soap_default_bool(soap, &this->ns1__soapableMessage::oeffentlich);
	this->ns1__soapableMessage::__sizegroups = 0;
	this->ns1__soapableMessage::groups = NULL;
	this->ns1__soapableMessage::time = NULL;
	/* transient soap skipped */
}

void ns1__soapableMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__soapableMessage::messageID, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__soapableMessage::userID, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__soapableMessage::abtNr, SOAP_TYPE_int);
	soap_serialize_string(soap, (char*const*)&this->ns1__soapableMessage::inhalt);
	if (this->ns1__soapableMessage::groups)
	{	int i;
		for (i = 0; i < (int)this->ns1__soapableMessage::__sizegroups; i++)
		{
			soap_embedded(soap, this->ns1__soapableMessage::groups + i, SOAP_TYPE_int);
		}
	}
	soap_serialize_PointerTodateTime(soap, &this->ns1__soapableMessage::time);
#endif
}

int ns1__soapableMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__soapableMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__soapableMessage(struct soap *soap, const char *tag, int id, const ns1__soapableMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__soapableMessage), type))
		return soap->error;
	if (soap_out_LONG64(soap, "serialVersionUID", -1, &a->ns1__soapableMessage::serialVersionUID, ""))
		return soap->error;
	if (soap_out_int(soap, "messageID", -1, &a->ns1__soapableMessage::messageID, ""))
		return soap->error;
	if (soap_out_int(soap, "userID", -1, &a->ns1__soapableMessage::userID, ""))
		return soap->error;
	if (soap_out_int(soap, "abtNr", -1, &a->ns1__soapableMessage::abtNr, ""))
		return soap->error;
	if (soap_out_string(soap, "inhalt", -1, (char*const*)&a->ns1__soapableMessage::inhalt, ""))
		return soap->error;
	if (soap_out_bool(soap, "oeffentlich", -1, &a->ns1__soapableMessage::oeffentlich, ""))
		return soap->error;
	if (a->ns1__soapableMessage::groups)
	{	int i;
		for (i = 0; i < (int)a->ns1__soapableMessage::__sizegroups; i++)
			if (soap_out_int(soap, "groups", -1, a->ns1__soapableMessage::groups + i, ""))
				return soap->error;
	}
	if (soap_out_PointerTodateTime(soap, "time", -1, &a->ns1__soapableMessage::time, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__soapableMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__soapableMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__soapableMessage * SOAP_FMAC4 soap_in_ns1__soapableMessage(struct soap *soap, const char *tag, ns1__soapableMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__soapableMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__soapableMessage, sizeof(ns1__soapableMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__soapableMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__soapableMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_serialVersionUID1 = 1;
	size_t soap_flag_messageID1 = 1;
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_abtNr1 = 1;
	size_t soap_flag_inhalt1 = 1;
	size_t soap_flag_oeffentlich1 = 1;
	struct soap_blist *soap_blist_groups1 = NULL;
	size_t soap_flag_time1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_serialVersionUID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "serialVersionUID", &a->ns1__soapableMessage::serialVersionUID, "xsd:long"))
				{	soap_flag_serialVersionUID1--;
					continue;
				}
			if (soap_flag_messageID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "messageID", &a->ns1__soapableMessage::messageID, "xsd:int"))
				{	soap_flag_messageID1--;
					continue;
				}
			if (soap_flag_userID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "userID", &a->ns1__soapableMessage::userID, "xsd:int"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_abtNr1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "abtNr", &a->ns1__soapableMessage::abtNr, "xsd:int"))
				{	soap_flag_abtNr1--;
					continue;
				}
			if (soap_flag_inhalt1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "inhalt", (char**)&a->ns1__soapableMessage::inhalt, "xsd:string"))
				{	soap_flag_inhalt1--;
					continue;
				}
			if (soap_flag_oeffentlich1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "oeffentlich", &a->ns1__soapableMessage::oeffentlich, "xsd:boolean"))
				{	soap_flag_oeffentlich1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "groups", 1, NULL))
			{	if (a->ns1__soapableMessage::groups == NULL)
				{	if (soap_blist_groups1 == NULL)
						soap_blist_groups1 = soap_alloc_block(soap);
					a->ns1__soapableMessage::groups = (int *)soap_push_block_max(soap, soap_blist_groups1, sizeof(int));
					if (a->ns1__soapableMessage::groups == NULL)
						return NULL;
					soap_default_int(soap, a->ns1__soapableMessage::groups);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "groups", a->ns1__soapableMessage::groups, "xsd:int"))
				{	a->ns1__soapableMessage::__sizegroups++;
					a->ns1__soapableMessage::groups = NULL;
					continue;
				}
			}
			if (soap_flag_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTodateTime(soap, "time", &a->ns1__soapableMessage::time, "xsd:dateTime"))
				{	soap_flag_time1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__soapableMessage::groups)
			soap_pop_block(soap, soap_blist_groups1);
		if (a->ns1__soapableMessage::__sizegroups)
		{	a->ns1__soapableMessage::groups = (int *)soap_save_block(soap, soap_blist_groups1, NULL, 1);
		}
		else
		{	a->ns1__soapableMessage::groups = NULL;
			if (soap_blist_groups1)
				soap_end_block(soap, soap_blist_groups1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_serialVersionUID1 > 0 || soap_flag_messageID1 > 0 || soap_flag_userID1 > 0 || soap_flag_abtNr1 > 0 || soap_flag_oeffentlich1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__soapableMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__soapableMessage, SOAP_TYPE_ns1__soapableMessage, sizeof(ns1__soapableMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__soapableMessage * SOAP_FMAC2 soap_instantiate_ns1__soapableMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__soapableMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__soapableMessage *p;
	size_t k = sizeof(ns1__soapableMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__soapableMessage);
		if (p)
			((ns1__soapableMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__soapableMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__soapableMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__soapableMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__soapableMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__soapableMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__soapableMessage(soap, tag ? tag : "ns1:soapableMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__soapableMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__soapableMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__soapableMessage * SOAP_FMAC4 soap_get_ns1__soapableMessage(struct soap *soap, ns1__soapableMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__soapableMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__receiveSoapableMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__receiveSoapableMessage::arg0 = NULL;
	/* transient soap skipped */
}

void ns1__receiveSoapableMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__soapableMessage(soap, &this->ns1__receiveSoapableMessage::arg0);
#endif
}

int ns1__receiveSoapableMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__receiveSoapableMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__receiveSoapableMessage(struct soap *soap, const char *tag, int id, const ns1__receiveSoapableMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__receiveSoapableMessage), type))
		return soap->error;
	if (soap_out_PointerTons1__soapableMessage(soap, "arg0", -1, &a->ns1__receiveSoapableMessage::arg0, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__receiveSoapableMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__receiveSoapableMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__receiveSoapableMessage * SOAP_FMAC4 soap_in_ns1__receiveSoapableMessage(struct soap *soap, const char *tag, ns1__receiveSoapableMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__receiveSoapableMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__receiveSoapableMessage, sizeof(ns1__receiveSoapableMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__receiveSoapableMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__receiveSoapableMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__soapableMessage(soap, "arg0", &a->ns1__receiveSoapableMessage::arg0, "ns1:soapableMessage"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__receiveSoapableMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__receiveSoapableMessage, SOAP_TYPE_ns1__receiveSoapableMessage, sizeof(ns1__receiveSoapableMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__receiveSoapableMessage * SOAP_FMAC2 soap_instantiate_ns1__receiveSoapableMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__receiveSoapableMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__receiveSoapableMessage *p;
	size_t k = sizeof(ns1__receiveSoapableMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__receiveSoapableMessage);
		if (p)
			((ns1__receiveSoapableMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__receiveSoapableMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__receiveSoapableMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__receiveSoapableMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__receiveSoapableMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__receiveSoapableMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__receiveSoapableMessage(soap, tag ? tag : "ns1:receiveSoapableMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__receiveSoapableMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__receiveSoapableMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__receiveSoapableMessage * SOAP_FMAC4 soap_get_ns1__receiveSoapableMessage(struct soap *soap, ns1__receiveSoapableMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__receiveSoapableMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__receiveMessageResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__receiveMessageResponse::return_);
	/* transient soap skipped */
}

void ns1__receiveMessageResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&this->ns1__receiveMessageResponse::return_);
#endif
}

int ns1__receiveMessageResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__receiveMessageResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__receiveMessageResponse(struct soap *soap, const char *tag, int id, const ns1__receiveMessageResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__receiveMessageResponse), type))
		return soap->error;
	if (soap_out_string(soap, "return", -1, (char*const*)&a->ns1__receiveMessageResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__receiveMessageResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__receiveMessageResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__receiveMessageResponse * SOAP_FMAC4 soap_in_ns1__receiveMessageResponse(struct soap *soap, const char *tag, ns1__receiveMessageResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__receiveMessageResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__receiveMessageResponse, sizeof(ns1__receiveMessageResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__receiveMessageResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__receiveMessageResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "return", (char**)&a->ns1__receiveMessageResponse::return_, "xsd:string"))
				{	soap_flag_return_1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__receiveMessageResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__receiveMessageResponse, SOAP_TYPE_ns1__receiveMessageResponse, sizeof(ns1__receiveMessageResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__receiveMessageResponse * SOAP_FMAC2 soap_instantiate_ns1__receiveMessageResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__receiveMessageResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__receiveMessageResponse *p;
	size_t k = sizeof(ns1__receiveMessageResponse);
	if (n < 0)
	{	p = SOAP_NEW(ns1__receiveMessageResponse);
		if (p)
			((ns1__receiveMessageResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__receiveMessageResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__receiveMessageResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__receiveMessageResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__receiveMessageResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__receiveMessageResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__receiveMessageResponse(soap, tag ? tag : "ns1:receiveMessageResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__receiveMessageResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__receiveMessageResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__receiveMessageResponse * SOAP_FMAC4 soap_get_ns1__receiveMessageResponse(struct soap *soap, ns1__receiveMessageResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__receiveMessageResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__receiveMessage::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns1__receiveMessage::arg0);
	soap_default_int(soap, &this->ns1__receiveMessage::arg1);
	soap_default_int(soap, &this->ns1__receiveMessage::arg2);
	soap_default_string(soap, &this->ns1__receiveMessage::arg3);
	soap_default_string(soap, &this->ns1__receiveMessage::arg4);
	soap_default_int(soap, &this->ns1__receiveMessage::arg5);
	/* transient soap skipped */
}

void ns1__receiveMessage::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns1__receiveMessage::arg0, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__receiveMessage::arg1, SOAP_TYPE_int);
	soap_embedded(soap, &this->ns1__receiveMessage::arg2, SOAP_TYPE_int);
	soap_serialize_string(soap, (char*const*)&this->ns1__receiveMessage::arg3);
	soap_serialize_string(soap, (char*const*)&this->ns1__receiveMessage::arg4);
	soap_embedded(soap, &this->ns1__receiveMessage::arg5, SOAP_TYPE_int);
#endif
}

int ns1__receiveMessage::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__receiveMessage(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__receiveMessage(struct soap *soap, const char *tag, int id, const ns1__receiveMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__receiveMessage), type))
		return soap->error;
	if (soap_out_int(soap, "arg0", -1, &a->ns1__receiveMessage::arg0, ""))
		return soap->error;
	if (soap_out_int(soap, "arg1", -1, &a->ns1__receiveMessage::arg1, ""))
		return soap->error;
	if (soap_out_int(soap, "arg2", -1, &a->ns1__receiveMessage::arg2, ""))
		return soap->error;
	if (soap_out_string(soap, "arg3", -1, (char*const*)&a->ns1__receiveMessage::arg3, ""))
		return soap->error;
	if (soap_out_string(soap, "arg4", -1, (char*const*)&a->ns1__receiveMessage::arg4, ""))
		return soap->error;
	if (soap_out_int(soap, "arg5", -1, &a->ns1__receiveMessage::arg5, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__receiveMessage::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__receiveMessage(soap, tag, this, type);
}

SOAP_FMAC3 ns1__receiveMessage * SOAP_FMAC4 soap_in_ns1__receiveMessage(struct soap *soap, const char *tag, ns1__receiveMessage *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__receiveMessage *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__receiveMessage, sizeof(ns1__receiveMessage), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__receiveMessage)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__receiveMessage *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_arg01 = 1;
	size_t soap_flag_arg11 = 1;
	size_t soap_flag_arg21 = 1;
	size_t soap_flag_arg31 = 1;
	size_t soap_flag_arg41 = 1;
	size_t soap_flag_arg51 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_arg01 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg0", &a->ns1__receiveMessage::arg0, "xsd:int"))
				{	soap_flag_arg01--;
					continue;
				}
			if (soap_flag_arg11 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg1", &a->ns1__receiveMessage::arg1, "xsd:int"))
				{	soap_flag_arg11--;
					continue;
				}
			if (soap_flag_arg21 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg2", &a->ns1__receiveMessage::arg2, "xsd:int"))
				{	soap_flag_arg21--;
					continue;
				}
			if (soap_flag_arg31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg3", (char**)&a->ns1__receiveMessage::arg3, "xsd:string"))
				{	soap_flag_arg31--;
					continue;
				}
			if (soap_flag_arg41 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "arg4", (char**)&a->ns1__receiveMessage::arg4, "xsd:string"))
				{	soap_flag_arg41--;
					continue;
				}
			if (soap_flag_arg51 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "arg5", &a->ns1__receiveMessage::arg5, "xsd:int"))
				{	soap_flag_arg51--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_arg01 > 0 || soap_flag_arg11 > 0 || soap_flag_arg21 > 0 || soap_flag_arg51 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && !*soap->href)
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (ns1__receiveMessage *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__receiveMessage, SOAP_TYPE_ns1__receiveMessage, sizeof(ns1__receiveMessage), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__receiveMessage * SOAP_FMAC2 soap_instantiate_ns1__receiveMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__receiveMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__receiveMessage *p;
	size_t k = sizeof(ns1__receiveMessage);
	if (n < 0)
	{	p = SOAP_NEW(ns1__receiveMessage);
		if (p)
			((ns1__receiveMessage*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__receiveMessage, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__receiveMessage*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__receiveMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__receiveMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__receiveMessage::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__receiveMessage(soap, tag ? tag : "ns1:receiveMessage", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__receiveMessage::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__receiveMessage(soap, this, tag, type);
}

SOAP_FMAC3 ns1__receiveMessage * SOAP_FMAC4 soap_get_ns1__receiveMessage(struct soap *soap, ns1__receiveMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__receiveMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__receiveSoapableMessage(struct soap *soap, struct __ns1__receiveSoapableMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__receiveSoapableMessage_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__receiveSoapableMessage(struct soap *soap, const struct __ns1__receiveSoapableMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__receiveSoapableMessage(soap, &a->ns1__receiveSoapableMessage_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__receiveSoapableMessage(struct soap *soap, const char *tag, int id, const struct __ns1__receiveSoapableMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__receiveSoapableMessage(soap, "ns1:receiveSoapableMessage", -1, &a->ns1__receiveSoapableMessage_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__receiveSoapableMessage * SOAP_FMAC4 soap_in___ns1__receiveSoapableMessage(struct soap *soap, const char *tag, struct __ns1__receiveSoapableMessage *a, const char *type)
{
	size_t soap_flag_ns1__receiveSoapableMessage_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__receiveSoapableMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__receiveSoapableMessage, sizeof(struct __ns1__receiveSoapableMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__receiveSoapableMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__receiveSoapableMessage_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__receiveSoapableMessage(soap, "ns1:receiveSoapableMessage", &a->ns1__receiveSoapableMessage_, "ns1:receiveSoapableMessage"))
				{	soap_flag_ns1__receiveSoapableMessage_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__receiveSoapableMessage * SOAP_FMAC2 soap_instantiate___ns1__receiveSoapableMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__receiveSoapableMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__receiveSoapableMessage *p;
	size_t k = sizeof(struct __ns1__receiveSoapableMessage);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__receiveSoapableMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__receiveSoapableMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__receiveSoapableMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__receiveSoapableMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__receiveSoapableMessage(struct soap *soap, const struct __ns1__receiveSoapableMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns1__receiveSoapableMessage(soap, tag ? tag : "-ns1:receiveSoapableMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__receiveSoapableMessage * SOAP_FMAC4 soap_get___ns1__receiveSoapableMessage(struct soap *soap, struct __ns1__receiveSoapableMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__receiveSoapableMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__registerServer(struct soap *soap, struct __ns1__registerServer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__registerServer_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__registerServer(struct soap *soap, const struct __ns1__registerServer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__registerServer(soap, &a->ns1__registerServer_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__registerServer(struct soap *soap, const char *tag, int id, const struct __ns1__registerServer *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__registerServer(soap, "ns1:registerServer", -1, &a->ns1__registerServer_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__registerServer * SOAP_FMAC4 soap_in___ns1__registerServer(struct soap *soap, const char *tag, struct __ns1__registerServer *a, const char *type)
{
	size_t soap_flag_ns1__registerServer_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__registerServer *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__registerServer, sizeof(struct __ns1__registerServer), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__registerServer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__registerServer_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__registerServer(soap, "ns1:registerServer", &a->ns1__registerServer_, "ns1:registerServer"))
				{	soap_flag_ns1__registerServer_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__registerServer * SOAP_FMAC2 soap_instantiate___ns1__registerServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__registerServer(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__registerServer *p;
	size_t k = sizeof(struct __ns1__registerServer);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__registerServer);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__registerServer, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__registerServer location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__registerServer, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__registerServer(struct soap *soap, const struct __ns1__registerServer *a, const char *tag, const char *type)
{
	if (soap_out___ns1__registerServer(soap, tag ? tag : "-ns1:registerServer", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__registerServer * SOAP_FMAC4 soap_get___ns1__registerServer(struct soap *soap, struct __ns1__registerServer *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__registerServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__receiveMessage(struct soap *soap, struct __ns1__receiveMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__receiveMessage_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__receiveMessage(struct soap *soap, const struct __ns1__receiveMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__receiveMessage(soap, &a->ns1__receiveMessage_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__receiveMessage(struct soap *soap, const char *tag, int id, const struct __ns1__receiveMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__receiveMessage(soap, "ns1:receiveMessage", -1, &a->ns1__receiveMessage_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__receiveMessage * SOAP_FMAC4 soap_in___ns1__receiveMessage(struct soap *soap, const char *tag, struct __ns1__receiveMessage *a, const char *type)
{
	size_t soap_flag_ns1__receiveMessage_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__receiveMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__receiveMessage, sizeof(struct __ns1__receiveMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__receiveMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__receiveMessage_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__receiveMessage(soap, "ns1:receiveMessage", &a->ns1__receiveMessage_, "ns1:receiveMessage"))
				{	soap_flag_ns1__receiveMessage_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__receiveMessage * SOAP_FMAC2 soap_instantiate___ns1__receiveMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__receiveMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__receiveMessage *p;
	size_t k = sizeof(struct __ns1__receiveMessage);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__receiveMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__receiveMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__receiveMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__receiveMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__receiveMessage(struct soap *soap, const struct __ns1__receiveMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns1__receiveMessage(soap, tag ? tag : "-ns1:receiveMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__receiveMessage * SOAP_FMAC4 soap_get___ns1__receiveMessage(struct soap *soap, struct __ns1__receiveMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__receiveMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__modifyPublicMessage(struct soap *soap, struct __ns1__modifyPublicMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__modifyPublicMessage_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__modifyPublicMessage(struct soap *soap, const struct __ns1__modifyPublicMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__modifyPublicMessage(soap, &a->ns1__modifyPublicMessage_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__modifyPublicMessage(struct soap *soap, const char *tag, int id, const struct __ns1__modifyPublicMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__modifyPublicMessage(soap, "ns1:modifyPublicMessage", -1, &a->ns1__modifyPublicMessage_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__modifyPublicMessage * SOAP_FMAC4 soap_in___ns1__modifyPublicMessage(struct soap *soap, const char *tag, struct __ns1__modifyPublicMessage *a, const char *type)
{
	size_t soap_flag_ns1__modifyPublicMessage_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__modifyPublicMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__modifyPublicMessage, sizeof(struct __ns1__modifyPublicMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__modifyPublicMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__modifyPublicMessage_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__modifyPublicMessage(soap, "ns1:modifyPublicMessage", &a->ns1__modifyPublicMessage_, "ns1:modifyPublicMessage"))
				{	soap_flag_ns1__modifyPublicMessage_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__modifyPublicMessage * SOAP_FMAC2 soap_instantiate___ns1__modifyPublicMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__modifyPublicMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__modifyPublicMessage *p;
	size_t k = sizeof(struct __ns1__modifyPublicMessage);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__modifyPublicMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__modifyPublicMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__modifyPublicMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__modifyPublicMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__modifyPublicMessage(struct soap *soap, const struct __ns1__modifyPublicMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns1__modifyPublicMessage(soap, tag ? tag : "-ns1:modifyPublicMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__modifyPublicMessage * SOAP_FMAC4 soap_get___ns1__modifyPublicMessage(struct soap *soap, struct __ns1__modifyPublicMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__modifyPublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__deletePublicMessage(struct soap *soap, struct __ns1__deletePublicMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__deletePublicMessage_ = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__deletePublicMessage(struct soap *soap, const struct __ns1__deletePublicMessage *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__deletePublicMessage(soap, &a->ns1__deletePublicMessage_);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__deletePublicMessage(struct soap *soap, const char *tag, int id, const struct __ns1__deletePublicMessage *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTons1__deletePublicMessage(soap, "ns1:deletePublicMessage", -1, &a->ns1__deletePublicMessage_, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deletePublicMessage * SOAP_FMAC4 soap_in___ns1__deletePublicMessage(struct soap *soap, const char *tag, struct __ns1__deletePublicMessage *a, const char *type)
{
	size_t soap_flag_ns1__deletePublicMessage_ = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__deletePublicMessage *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__deletePublicMessage, sizeof(struct __ns1__deletePublicMessage), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__deletePublicMessage(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__deletePublicMessage_ && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__deletePublicMessage(soap, "ns1:deletePublicMessage", &a->ns1__deletePublicMessage_, "ns1:deletePublicMessage"))
				{	soap_flag_ns1__deletePublicMessage_--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__deletePublicMessage * SOAP_FMAC2 soap_instantiate___ns1__deletePublicMessage(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__deletePublicMessage(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__deletePublicMessage *p;
	size_t k = sizeof(struct __ns1__deletePublicMessage);
	if (n < 0)
	{	p = SOAP_NEW(struct __ns1__deletePublicMessage);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __ns1__deletePublicMessage, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__deletePublicMessage location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___ns1__deletePublicMessage, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__deletePublicMessage(struct soap *soap, const struct __ns1__deletePublicMessage *a, const char *tag, const char *type)
{
	if (soap_out___ns1__deletePublicMessage(soap, tag ? tag : "-ns1:deletePublicMessage", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__deletePublicMessage * SOAP_FMAC4 soap_get___ns1__deletePublicMessage(struct soap *soap, struct __ns1__deletePublicMessage *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__deletePublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__receiveSoapableMessage(struct soap *soap, ns1__receiveSoapableMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__receiveSoapableMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__receiveSoapableMessage(struct soap *soap, const char *tag, int id, ns1__receiveSoapableMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__receiveSoapableMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__receiveSoapableMessage ? type : NULL);
}

SOAP_FMAC3 ns1__receiveSoapableMessage ** SOAP_FMAC4 soap_in_PointerTons1__receiveSoapableMessage(struct soap *soap, const char *tag, ns1__receiveSoapableMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__receiveSoapableMessage **)soap_malloc(soap, sizeof(ns1__receiveSoapableMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__receiveSoapableMessage *)soap_instantiate_ns1__receiveSoapableMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__receiveSoapableMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__receiveSoapableMessage, sizeof(ns1__receiveSoapableMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__receiveSoapableMessage(struct soap *soap, ns1__receiveSoapableMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__receiveSoapableMessage(soap, tag ? tag : "ns1:receiveSoapableMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__receiveSoapableMessage ** SOAP_FMAC4 soap_get_PointerTons1__receiveSoapableMessage(struct soap *soap, ns1__receiveSoapableMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__receiveSoapableMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__registerServer(struct soap *soap, ns1__registerServer *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__registerServer))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__registerServer(struct soap *soap, const char *tag, int id, ns1__registerServer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__registerServer, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__registerServer ? type : NULL);
}

SOAP_FMAC3 ns1__registerServer ** SOAP_FMAC4 soap_in_PointerTons1__registerServer(struct soap *soap, const char *tag, ns1__registerServer **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__registerServer **)soap_malloc(soap, sizeof(ns1__registerServer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__registerServer *)soap_instantiate_ns1__registerServer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__registerServer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__registerServer, sizeof(ns1__registerServer), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__registerServer(struct soap *soap, ns1__registerServer *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__registerServer(soap, tag ? tag : "ns1:registerServer", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__registerServer ** SOAP_FMAC4 soap_get_PointerTons1__registerServer(struct soap *soap, ns1__registerServer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__registerServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__receiveMessage(struct soap *soap, ns1__receiveMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__receiveMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__receiveMessage(struct soap *soap, const char *tag, int id, ns1__receiveMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__receiveMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__receiveMessage ? type : NULL);
}

SOAP_FMAC3 ns1__receiveMessage ** SOAP_FMAC4 soap_in_PointerTons1__receiveMessage(struct soap *soap, const char *tag, ns1__receiveMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__receiveMessage **)soap_malloc(soap, sizeof(ns1__receiveMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__receiveMessage *)soap_instantiate_ns1__receiveMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__receiveMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__receiveMessage, sizeof(ns1__receiveMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__receiveMessage(struct soap *soap, ns1__receiveMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__receiveMessage(soap, tag ? tag : "ns1:receiveMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__receiveMessage ** SOAP_FMAC4 soap_get_PointerTons1__receiveMessage(struct soap *soap, ns1__receiveMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__receiveMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__modifyPublicMessage(struct soap *soap, ns1__modifyPublicMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__modifyPublicMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__modifyPublicMessage(struct soap *soap, const char *tag, int id, ns1__modifyPublicMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__modifyPublicMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__modifyPublicMessage ? type : NULL);
}

SOAP_FMAC3 ns1__modifyPublicMessage ** SOAP_FMAC4 soap_in_PointerTons1__modifyPublicMessage(struct soap *soap, const char *tag, ns1__modifyPublicMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__modifyPublicMessage **)soap_malloc(soap, sizeof(ns1__modifyPublicMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__modifyPublicMessage *)soap_instantiate_ns1__modifyPublicMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__modifyPublicMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__modifyPublicMessage, sizeof(ns1__modifyPublicMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__modifyPublicMessage(struct soap *soap, ns1__modifyPublicMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__modifyPublicMessage(soap, tag ? tag : "ns1:modifyPublicMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__modifyPublicMessage ** SOAP_FMAC4 soap_get_PointerTons1__modifyPublicMessage(struct soap *soap, ns1__modifyPublicMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__modifyPublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__deletePublicMessage(struct soap *soap, ns1__deletePublicMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__deletePublicMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__deletePublicMessage(struct soap *soap, const char *tag, int id, ns1__deletePublicMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__deletePublicMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__deletePublicMessage ? type : NULL);
}

SOAP_FMAC3 ns1__deletePublicMessage ** SOAP_FMAC4 soap_in_PointerTons1__deletePublicMessage(struct soap *soap, const char *tag, ns1__deletePublicMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__deletePublicMessage **)soap_malloc(soap, sizeof(ns1__deletePublicMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__deletePublicMessage *)soap_instantiate_ns1__deletePublicMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__deletePublicMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__deletePublicMessage, sizeof(ns1__deletePublicMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__deletePublicMessage(struct soap *soap, ns1__deletePublicMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__deletePublicMessage(soap, tag ? tag : "ns1:deletePublicMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__deletePublicMessage ** SOAP_FMAC4 soap_get_PointerTons1__deletePublicMessage(struct soap *soap, ns1__deletePublicMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__deletePublicMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap *soap, time_t *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_dateTime);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_dateTime, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_dateTime(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_dateTime(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_dateTime, sizeof(time_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTodateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTodateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToint(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__soapableMessage(struct soap *soap, ns1__soapableMessage *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__soapableMessage))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__soapableMessage(struct soap *soap, const char *tag, int id, ns1__soapableMessage *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__soapableMessage, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__soapableMessage ? type : NULL);
}

SOAP_FMAC3 ns1__soapableMessage ** SOAP_FMAC4 soap_in_PointerTons1__soapableMessage(struct soap *soap, const char *tag, ns1__soapableMessage **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__soapableMessage **)soap_malloc(soap, sizeof(ns1__soapableMessage *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__soapableMessage *)soap_instantiate_ns1__soapableMessage(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__soapableMessage **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__soapableMessage, sizeof(ns1__soapableMessage), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__soapableMessage(struct soap *soap, ns1__soapableMessage *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__soapableMessage(soap, tag ? tag : "ns1:soapableMessage", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__soapableMessage ** SOAP_FMAC4 soap_get_PointerTons1__soapableMessage(struct soap *soap, ns1__soapableMessage **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__soapableMessage(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new__QName(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default__QName(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
