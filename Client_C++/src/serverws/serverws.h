/* F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h
   Generated by wsdl2h 2.8.44 from http://localhost:8080/TafelWS/serverws?wsdl and typemap.dat
   2017-03-17 02:08:58 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://webservice.tafelServer/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://webservice.tafelServer/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://webservice.tafelServer/"
//gsoap ns1   schema namespace:	http://webservice.tafelServer/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__receiveMessage.
class ns1__receiveMessage;

//  Forward declaration of class ns1__receiveMessageResponse.
class ns1__receiveMessageResponse;

//  Forward declaration of class ns1__receiveSoapableMessage.
class ns1__receiveSoapableMessage;

//  Forward declaration of class ns1__soapableMessage.
class ns1__soapableMessage;

//  Forward declaration of class ns1__receiveSoapableMessageResponse.
class ns1__receiveSoapableMessageResponse;

//  Forward declaration of class ns1__deletePublicMessage.
class ns1__deletePublicMessage;

//  Forward declaration of class ns1__deletePublicMessageResponse.
class ns1__deletePublicMessageResponse;

//  Forward declaration of class ns1__registerServer.
class ns1__registerServer;

//  Forward declaration of class ns1__registerServerResponse.
class ns1__registerServerResponse;

//  Forward declaration of class ns1__modifyPublicMessage.
class ns1__modifyPublicMessage;

//  Forward declaration of class ns1__modifyPublicMessageResponse.
class ns1__modifyPublicMessageResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://webservice.tafelServer/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://webservice.tafelServer/                                           *
 *                                                                            *
\******************************************************************************/

/// @brief "http://webservice.tafelServer/":receiveMessage is a complexType.
///
/// class ns1__receiveMessage operations:
/// - ns1__receiveMessage* soap_new_ns1__receiveMessage(soap*) allocate and default initialize
/// - ns1__receiveMessage* soap_new_ns1__receiveMessage(soap*, int num) allocate array and default initialize values
/// - ns1__receiveMessage* soap_new_req_ns1__receiveMessage(soap*, ...) allocate, set required members
/// - ns1__receiveMessage* soap_new_set_ns1__receiveMessage(soap*, ...) allocate, set all public members
/// - ns1__receiveMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__receiveMessage(soap*, ns1__receiveMessage*) deserialize from a stream
/// - int soap_write_ns1__receiveMessage(soap*, ns1__receiveMessage*) serialize to a stream
/// - ns1__receiveMessage* ns1__receiveMessage::soap_dup(soap*) returns deep copy of ns1__receiveMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__receiveMessage::soap_del() deep deletes ns1__receiveMessage data members, use only after ns1__receiveMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__receiveMessage
{ public:
/// Element "arg0" of XSD type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Element "arg1" of XSD type xs:int.
    int                                  arg1                           1;	///< Required element.
/// Element "arg2" of XSD type xs:int.
    int                                  arg2                           1;	///< Required element.
/// Element "arg3" of XSD type xs:string.
    char*                                arg3                           0;	///< Optional element.
/// Element "arg4" of XSD type xs:string.
    char*                                arg4                           0;	///< Optional element.
/// Element "arg5" of XSD type xs:int.
    int                                  arg5                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":receiveMessageResponse is a complexType.
///
/// class ns1__receiveMessageResponse operations:
/// - ns1__receiveMessageResponse* soap_new_ns1__receiveMessageResponse(soap*) allocate and default initialize
/// - ns1__receiveMessageResponse* soap_new_ns1__receiveMessageResponse(soap*, int num) allocate array and default initialize values
/// - ns1__receiveMessageResponse* soap_new_req_ns1__receiveMessageResponse(soap*, ...) allocate, set required members
/// - ns1__receiveMessageResponse* soap_new_set_ns1__receiveMessageResponse(soap*, ...) allocate, set all public members
/// - ns1__receiveMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__receiveMessageResponse(soap*, ns1__receiveMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__receiveMessageResponse(soap*, ns1__receiveMessageResponse*) serialize to a stream
/// - ns1__receiveMessageResponse* ns1__receiveMessageResponse::soap_dup(soap*) returns deep copy of ns1__receiveMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__receiveMessageResponse::soap_del() deep deletes ns1__receiveMessageResponse data members, use only after ns1__receiveMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__receiveMessageResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":receiveSoapableMessage is a complexType.
///
/// class ns1__receiveSoapableMessage operations:
/// - ns1__receiveSoapableMessage* soap_new_ns1__receiveSoapableMessage(soap*) allocate and default initialize
/// - ns1__receiveSoapableMessage* soap_new_ns1__receiveSoapableMessage(soap*, int num) allocate array and default initialize values
/// - ns1__receiveSoapableMessage* soap_new_req_ns1__receiveSoapableMessage(soap*, ...) allocate, set required members
/// - ns1__receiveSoapableMessage* soap_new_set_ns1__receiveSoapableMessage(soap*, ...) allocate, set all public members
/// - ns1__receiveSoapableMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__receiveSoapableMessage(soap*, ns1__receiveSoapableMessage*) deserialize from a stream
/// - int soap_write_ns1__receiveSoapableMessage(soap*, ns1__receiveSoapableMessage*) serialize to a stream
/// - ns1__receiveSoapableMessage* ns1__receiveSoapableMessage::soap_dup(soap*) returns deep copy of ns1__receiveSoapableMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__receiveSoapableMessage::soap_del() deep deletes ns1__receiveSoapableMessage data members, use only after ns1__receiveSoapableMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__receiveSoapableMessage
{ public:
/// Element "arg0" of XSD type "http://webservice.tafelServer/":soapableMessage.
    ns1__soapableMessage*                arg0                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":soapableMessage is a complexType.
///
/// class ns1__soapableMessage operations:
/// - ns1__soapableMessage* soap_new_ns1__soapableMessage(soap*) allocate and default initialize
/// - ns1__soapableMessage* soap_new_ns1__soapableMessage(soap*, int num) allocate array and default initialize values
/// - ns1__soapableMessage* soap_new_req_ns1__soapableMessage(soap*, ...) allocate, set required members
/// - ns1__soapableMessage* soap_new_set_ns1__soapableMessage(soap*, ...) allocate, set all public members
/// - ns1__soapableMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__soapableMessage(soap*, ns1__soapableMessage*) deserialize from a stream
/// - int soap_write_ns1__soapableMessage(soap*, ns1__soapableMessage*) serialize to a stream
/// - ns1__soapableMessage* ns1__soapableMessage::soap_dup(soap*) returns deep copy of ns1__soapableMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__soapableMessage::soap_del() deep deletes ns1__soapableMessage data members, use only after ns1__soapableMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__soapableMessage
{ public:
/// Element "serialVersionUID" of XSD type xs:long.
    LONG64                               serialVersionUID               1;	///< Required element.
/// Element "messageID" of XSD type xs:int.
    int                                  messageID                      1;	///< Required element.
/// Element "userID" of XSD type xs:int.
    int                                  userID                         1;	///< Required element.
/// Element "abtNr" of XSD type xs:int.
    int                                  abtNr                          1;	///< Required element.
/// Element "inhalt" of XSD type xs:string.
    char*                                inhalt                         0;	///< Optional element.
/// Element "oeffentlich" of XSD type xs:boolean.
    bool                                 oeffentlich                    1;	///< Required element.
/// Size of array of int is 0..unbounded.
   $int                                  __sizegroups                   0;
/// Pointer to array int of size 0..unbounded.
    int                                 *groups                         0;
/// Element "time" of XSD type xs:dateTime.
    time_t*                              time                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":receiveSoapableMessageResponse is a complexType.
///
/// class ns1__receiveSoapableMessageResponse operations:
/// - ns1__receiveSoapableMessageResponse* soap_new_ns1__receiveSoapableMessageResponse(soap*) allocate and default initialize
/// - ns1__receiveSoapableMessageResponse* soap_new_ns1__receiveSoapableMessageResponse(soap*, int num) allocate array and default initialize values
/// - ns1__receiveSoapableMessageResponse* soap_new_req_ns1__receiveSoapableMessageResponse(soap*, ...) allocate, set required members
/// - ns1__receiveSoapableMessageResponse* soap_new_set_ns1__receiveSoapableMessageResponse(soap*, ...) allocate, set all public members
/// - ns1__receiveSoapableMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__receiveSoapableMessageResponse(soap*, ns1__receiveSoapableMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__receiveSoapableMessageResponse(soap*, ns1__receiveSoapableMessageResponse*) serialize to a stream
/// - ns1__receiveSoapableMessageResponse* ns1__receiveSoapableMessageResponse::soap_dup(soap*) returns deep copy of ns1__receiveSoapableMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__receiveSoapableMessageResponse::soap_del() deep deletes ns1__receiveSoapableMessageResponse data members, use only after ns1__receiveSoapableMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__receiveSoapableMessageResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":deletePublicMessage is a complexType.
///
/// class ns1__deletePublicMessage operations:
/// - ns1__deletePublicMessage* soap_new_ns1__deletePublicMessage(soap*) allocate and default initialize
/// - ns1__deletePublicMessage* soap_new_ns1__deletePublicMessage(soap*, int num) allocate array and default initialize values
/// - ns1__deletePublicMessage* soap_new_req_ns1__deletePublicMessage(soap*, ...) allocate, set required members
/// - ns1__deletePublicMessage* soap_new_set_ns1__deletePublicMessage(soap*, ...) allocate, set all public members
/// - ns1__deletePublicMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deletePublicMessage(soap*, ns1__deletePublicMessage*) deserialize from a stream
/// - int soap_write_ns1__deletePublicMessage(soap*, ns1__deletePublicMessage*) serialize to a stream
/// - ns1__deletePublicMessage* ns1__deletePublicMessage::soap_dup(soap*) returns deep copy of ns1__deletePublicMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deletePublicMessage::soap_del() deep deletes ns1__deletePublicMessage data members, use only after ns1__deletePublicMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deletePublicMessage
{ public:
/// Element "arg0" of XSD type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Element "arg1" of XSD type xs:int.
    int                                  arg1                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":deletePublicMessageResponse is a complexType.
///
/// class ns1__deletePublicMessageResponse operations:
/// - ns1__deletePublicMessageResponse* soap_new_ns1__deletePublicMessageResponse(soap*) allocate and default initialize
/// - ns1__deletePublicMessageResponse* soap_new_ns1__deletePublicMessageResponse(soap*, int num) allocate array and default initialize values
/// - ns1__deletePublicMessageResponse* soap_new_req_ns1__deletePublicMessageResponse(soap*, ...) allocate, set required members
/// - ns1__deletePublicMessageResponse* soap_new_set_ns1__deletePublicMessageResponse(soap*, ...) allocate, set all public members
/// - ns1__deletePublicMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__deletePublicMessageResponse(soap*, ns1__deletePublicMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__deletePublicMessageResponse(soap*, ns1__deletePublicMessageResponse*) serialize to a stream
/// - ns1__deletePublicMessageResponse* ns1__deletePublicMessageResponse::soap_dup(soap*) returns deep copy of ns1__deletePublicMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__deletePublicMessageResponse::soap_del() deep deletes ns1__deletePublicMessageResponse data members, use only after ns1__deletePublicMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__deletePublicMessageResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":registerServer is a complexType.
///
/// class ns1__registerServer operations:
/// - ns1__registerServer* soap_new_ns1__registerServer(soap*) allocate and default initialize
/// - ns1__registerServer* soap_new_ns1__registerServer(soap*, int num) allocate array and default initialize values
/// - ns1__registerServer* soap_new_req_ns1__registerServer(soap*, ...) allocate, set required members
/// - ns1__registerServer* soap_new_set_ns1__registerServer(soap*, ...) allocate, set all public members
/// - ns1__registerServer::soap_default(soap*) default initialize members
/// - int soap_read_ns1__registerServer(soap*, ns1__registerServer*) deserialize from a stream
/// - int soap_write_ns1__registerServer(soap*, ns1__registerServer*) serialize to a stream
/// - ns1__registerServer* ns1__registerServer::soap_dup(soap*) returns deep copy of ns1__registerServer, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__registerServer::soap_del() deep deletes ns1__registerServer data members, use only after ns1__registerServer::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__registerServer
{ public:
/// Element "arg0" of XSD type xs:int.
    int                                  arg0                           1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":registerServerResponse is a complexType.
///
/// class ns1__registerServerResponse operations:
/// - ns1__registerServerResponse* soap_new_ns1__registerServerResponse(soap*) allocate and default initialize
/// - ns1__registerServerResponse* soap_new_ns1__registerServerResponse(soap*, int num) allocate array and default initialize values
/// - ns1__registerServerResponse* soap_new_req_ns1__registerServerResponse(soap*, ...) allocate, set required members
/// - ns1__registerServerResponse* soap_new_set_ns1__registerServerResponse(soap*, ...) allocate, set all public members
/// - ns1__registerServerResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__registerServerResponse(soap*, ns1__registerServerResponse*) deserialize from a stream
/// - int soap_write_ns1__registerServerResponse(soap*, ns1__registerServerResponse*) serialize to a stream
/// - ns1__registerServerResponse* ns1__registerServerResponse::soap_dup(soap*) returns deep copy of ns1__registerServerResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__registerServerResponse::soap_del() deep deletes ns1__registerServerResponse data members, use only after ns1__registerServerResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__registerServerResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":modifyPublicMessage is a complexType.
///
/// class ns1__modifyPublicMessage operations:
/// - ns1__modifyPublicMessage* soap_new_ns1__modifyPublicMessage(soap*) allocate and default initialize
/// - ns1__modifyPublicMessage* soap_new_ns1__modifyPublicMessage(soap*, int num) allocate array and default initialize values
/// - ns1__modifyPublicMessage* soap_new_req_ns1__modifyPublicMessage(soap*, ...) allocate, set required members
/// - ns1__modifyPublicMessage* soap_new_set_ns1__modifyPublicMessage(soap*, ...) allocate, set all public members
/// - ns1__modifyPublicMessage::soap_default(soap*) default initialize members
/// - int soap_read_ns1__modifyPublicMessage(soap*, ns1__modifyPublicMessage*) deserialize from a stream
/// - int soap_write_ns1__modifyPublicMessage(soap*, ns1__modifyPublicMessage*) serialize to a stream
/// - ns1__modifyPublicMessage* ns1__modifyPublicMessage::soap_dup(soap*) returns deep copy of ns1__modifyPublicMessage, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__modifyPublicMessage::soap_del() deep deletes ns1__modifyPublicMessage data members, use only after ns1__modifyPublicMessage::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__modifyPublicMessage
{ public:
/// Element "arg0" of XSD type xs:int.
    int                                  arg0                           1;	///< Required element.
/// Element "arg1" of XSD type xs:string.
    char*                                arg1                           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://webservice.tafelServer/":modifyPublicMessageResponse is a complexType.
///
/// class ns1__modifyPublicMessageResponse operations:
/// - ns1__modifyPublicMessageResponse* soap_new_ns1__modifyPublicMessageResponse(soap*) allocate and default initialize
/// - ns1__modifyPublicMessageResponse* soap_new_ns1__modifyPublicMessageResponse(soap*, int num) allocate array and default initialize values
/// - ns1__modifyPublicMessageResponse* soap_new_req_ns1__modifyPublicMessageResponse(soap*, ...) allocate, set required members
/// - ns1__modifyPublicMessageResponse* soap_new_set_ns1__modifyPublicMessageResponse(soap*, ...) allocate, set all public members
/// - ns1__modifyPublicMessageResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns1__modifyPublicMessageResponse(soap*, ns1__modifyPublicMessageResponse*) deserialize from a stream
/// - int soap_write_ns1__modifyPublicMessageResponse(soap*, ns1__modifyPublicMessageResponse*) serialize to a stream
/// - ns1__modifyPublicMessageResponse* ns1__modifyPublicMessageResponse::soap_dup(soap*) returns deep copy of ns1__modifyPublicMessageResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__modifyPublicMessageResponse::soap_del() deep deletes ns1__modifyPublicMessageResponse data members, use only after ns1__modifyPublicMessageResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class ns1__modifyPublicMessageResponse
{ public:
/// Element "return" of XSD type xs:string.
    char*                                return_                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://webservice.tafelServer/                                           *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://webservice.tafelServer/":SoapableMessage of XSD type "http://webservice.tafelServer/":soapableMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":deletePublicMessage of XSD type "http://webservice.tafelServer/":deletePublicMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":deletePublicMessageResponse of XSD type "http://webservice.tafelServer/":deletePublicMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":modifyPublicMessage of XSD type "http://webservice.tafelServer/":modifyPublicMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":modifyPublicMessageResponse of XSD type "http://webservice.tafelServer/":modifyPublicMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":receiveMessage of XSD type "http://webservice.tafelServer/":receiveMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":receiveMessageResponse of XSD type "http://webservice.tafelServer/":receiveMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":receiveSoapableMessage of XSD type "http://webservice.tafelServer/":receiveSoapableMessage.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":receiveSoapableMessageResponse of XSD type "http://webservice.tafelServer/":receiveSoapableMessageResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":registerServer of XSD type "http://webservice.tafelServer/":registerServer.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://webservice.tafelServer/":registerServerResponse of XSD type "http://webservice.tafelServer/":registerServerResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://webservice.tafelServer/                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	ServerComWebserviceImplPortBinding 
//gsoap ns1  service type:	ServerComWebservice 
//gsoap ns1  service port:	http://localhost:8080/TafelWS/serverws 
//gsoap ns1  service namespace:	http://webservice.tafelServer/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ServerComWebserviceImplService Definitions

@section ServerComWebserviceImplService_bindings Service Bindings

  - @ref ServerComWebserviceImplPortBinding

@section ServerComWebserviceImplService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page ServerComWebserviceImplPortBinding Binding "ServerComWebserviceImplPortBinding"

@section ServerComWebserviceImplPortBinding_operations Operations of Binding "ServerComWebserviceImplPortBinding"

  - @ref __ns1__deletePublicMessage

  - @ref __ns1__modifyPublicMessage

  - @ref __ns1__receiveMessage

  - @ref __ns1__registerServer

  - @ref __ns1__receiveSoapableMessage

@section ServerComWebserviceImplPortBinding_ports Default endpoints of Binding "ServerComWebserviceImplPortBinding"

  - http://localhost:8080/TafelWS/serverws

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ServerComWebserviceImplPortBinding                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deletePublicMessage                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__deletePublicMessage" of service binding "ServerComWebserviceImplPortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8080/TafelWS/serverws

  - Addressing input action: "http://webservice.tafelServer/ServerComWebservice/deletePublicMessageRequest"

  - Addressing output action: "http://webservice.tafelServer/ServerComWebservice/deletePublicMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deletePublicMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__deletePublicMessage*           ns1__deletePublicMessage_,
    // output parameters:
    ns1__deletePublicMessageResponse   &ns1__deletePublicMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deletePublicMessage(
    struct soap *soap,
    // input parameters:
    ns1__deletePublicMessage*           ns1__deletePublicMessage_,
    // output parameters:
    ns1__deletePublicMessageResponse   &ns1__deletePublicMessageResponse_
  );
@endcode

C++ proxy class (defined in soapServerComWebserviceImplPortBindingProxy.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServerComWebserviceImplPortBindingService.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	deletePublicMessage SOAP
//gsoap ns1  service method-style:	deletePublicMessage document
//gsoap ns1  service method-encoding:	deletePublicMessage literal
//gsoap ns1  service method-input-action:	deletePublicMessage http://webservice.tafelServer/ServerComWebservice/deletePublicMessageRequest
//gsoap ns1  service method-output-action:	deletePublicMessage http://webservice.tafelServer/ServerComWebservice/deletePublicMessageResponse
int __ns1__deletePublicMessage(
    ns1__deletePublicMessage*           ns1__deletePublicMessage_,	///< Input parameter
    ns1__deletePublicMessageResponse   &ns1__deletePublicMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__modifyPublicMessage                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__modifyPublicMessage" of service binding "ServerComWebserviceImplPortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8080/TafelWS/serverws

  - Addressing input action: "http://webservice.tafelServer/ServerComWebservice/modifyPublicMessageRequest"

  - Addressing output action: "http://webservice.tafelServer/ServerComWebservice/modifyPublicMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__modifyPublicMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__modifyPublicMessage*           ns1__modifyPublicMessage_,
    // output parameters:
    ns1__modifyPublicMessageResponse   &ns1__modifyPublicMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__modifyPublicMessage(
    struct soap *soap,
    // input parameters:
    ns1__modifyPublicMessage*           ns1__modifyPublicMessage_,
    // output parameters:
    ns1__modifyPublicMessageResponse   &ns1__modifyPublicMessageResponse_
  );
@endcode

C++ proxy class (defined in soapServerComWebserviceImplPortBindingProxy.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServerComWebserviceImplPortBindingService.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	modifyPublicMessage SOAP
//gsoap ns1  service method-style:	modifyPublicMessage document
//gsoap ns1  service method-encoding:	modifyPublicMessage literal
//gsoap ns1  service method-input-action:	modifyPublicMessage http://webservice.tafelServer/ServerComWebservice/modifyPublicMessageRequest
//gsoap ns1  service method-output-action:	modifyPublicMessage http://webservice.tafelServer/ServerComWebservice/modifyPublicMessageResponse
int __ns1__modifyPublicMessage(
    ns1__modifyPublicMessage*           ns1__modifyPublicMessage_,	///< Input parameter
    ns1__modifyPublicMessageResponse   &ns1__modifyPublicMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__receiveMessage                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__receiveMessage" of service binding "ServerComWebserviceImplPortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8080/TafelWS/serverws

  - Addressing input action: "http://webservice.tafelServer/ServerComWebservice/receiveMessageRequest"

  - Addressing output action: "http://webservice.tafelServer/ServerComWebservice/receiveMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__receiveMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__receiveMessage*                ns1__receiveMessage_,
    // output parameters:
    ns1__receiveMessageResponse        &ns1__receiveMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__receiveMessage(
    struct soap *soap,
    // input parameters:
    ns1__receiveMessage*                ns1__receiveMessage_,
    // output parameters:
    ns1__receiveMessageResponse        &ns1__receiveMessageResponse_
  );
@endcode

C++ proxy class (defined in soapServerComWebserviceImplPortBindingProxy.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServerComWebserviceImplPortBindingService.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	receiveMessage SOAP
//gsoap ns1  service method-style:	receiveMessage document
//gsoap ns1  service method-encoding:	receiveMessage literal
//gsoap ns1  service method-input-action:	receiveMessage http://webservice.tafelServer/ServerComWebservice/receiveMessageRequest
//gsoap ns1  service method-output-action:	receiveMessage http://webservice.tafelServer/ServerComWebservice/receiveMessageResponse
int __ns1__receiveMessage(
    ns1__receiveMessage*                ns1__receiveMessage_,	///< Input parameter
    ns1__receiveMessageResponse        &ns1__receiveMessageResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__registerServer                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__registerServer" of service binding "ServerComWebserviceImplPortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8080/TafelWS/serverws

  - Addressing input action: "http://webservice.tafelServer/ServerComWebservice/registerServerRequest"

  - Addressing output action: "http://webservice.tafelServer/ServerComWebservice/registerServerResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__registerServer(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__registerServer*                ns1__registerServer_,
    // output parameters:
    ns1__registerServerResponse        &ns1__registerServerResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__registerServer(
    struct soap *soap,
    // input parameters:
    ns1__registerServer*                ns1__registerServer_,
    // output parameters:
    ns1__registerServerResponse        &ns1__registerServerResponse_
  );
@endcode

C++ proxy class (defined in soapServerComWebserviceImplPortBindingProxy.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServerComWebserviceImplPortBindingService.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	registerServer SOAP
//gsoap ns1  service method-style:	registerServer document
//gsoap ns1  service method-encoding:	registerServer literal
//gsoap ns1  service method-input-action:	registerServer http://webservice.tafelServer/ServerComWebservice/registerServerRequest
//gsoap ns1  service method-output-action:	registerServer http://webservice.tafelServer/ServerComWebservice/registerServerResponse
int __ns1__registerServer(
    ns1__registerServer*                ns1__registerServer_,	///< Input parameter
    ns1__registerServerResponse        &ns1__registerServerResponse_	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__receiveSoapableMessage                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__receiveSoapableMessage" of service binding "ServerComWebserviceImplPortBinding".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://localhost:8080/TafelWS/serverws

  - Addressing input action: "http://webservice.tafelServer/ServerComWebservice/receiveSoapableMessageRequest"

  - Addressing output action: "http://webservice.tafelServer/ServerComWebservice/receiveSoapableMessageResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__receiveSoapableMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns1__receiveSoapableMessage*        ns1__receiveSoapableMessage_,
    // output parameters:
    ns1__receiveSoapableMessageResponse&ns1__receiveSoapableMessageResponse_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__receiveSoapableMessage(
    struct soap *soap,
    // input parameters:
    ns1__receiveSoapableMessage*        ns1__receiveSoapableMessage_,
    // output parameters:
    ns1__receiveSoapableMessageResponse&ns1__receiveSoapableMessageResponse_
  );
@endcode

C++ proxy class (defined in soapServerComWebserviceImplPortBindingProxy.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapServerComWebserviceImplPortBindingService.h generated with soapcpp2):
@code
  class ServerComWebserviceImplPortBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	receiveSoapableMessage SOAP
//gsoap ns1  service method-style:	receiveSoapableMessage document
//gsoap ns1  service method-encoding:	receiveSoapableMessage literal
//gsoap ns1  service method-input-action:	receiveSoapableMessage http://webservice.tafelServer/ServerComWebservice/receiveSoapableMessageRequest
//gsoap ns1  service method-output-action:	receiveSoapableMessage http://webservice.tafelServer/ServerComWebservice/receiveSoapableMessageResponse
int __ns1__receiveSoapableMessage(
    ns1__receiveSoapableMessage*        ns1__receiveSoapableMessage_,	///< Input parameter
    ns1__receiveSoapableMessageResponse&ns1__receiveSoapableMessageResponse_	///< Output parameter
);

/**

@page ServerComWebserviceImplPortBinding Binding "ServerComWebserviceImplPortBinding"

@section ServerComWebserviceImplPortBinding_policy_enablers Policy Enablers of Binding "ServerComWebserviceImplPortBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section  Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://webservice.tafelServer/"

  - <ns1:SoapableMessage> (use wsdl2h option -g to auto-generate type _ns1__SoapableMessage)

  - <ns1:deletePublicMessage> (use wsdl2h option -g to auto-generate type _ns1__deletePublicMessage)

  - <ns1:deletePublicMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__deletePublicMessageResponse)

  - <ns1:modifyPublicMessage> (use wsdl2h option -g to auto-generate type _ns1__modifyPublicMessage)

  - <ns1:modifyPublicMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__modifyPublicMessageResponse)

  - <ns1:receiveMessage> (use wsdl2h option -g to auto-generate type _ns1__receiveMessage)

  - <ns1:receiveMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__receiveMessageResponse)

  - <ns1:receiveSoapableMessage> (use wsdl2h option -g to auto-generate type _ns1__receiveSoapableMessage)

  - <ns1:receiveSoapableMessageResponse> (use wsdl2h option -g to auto-generate type _ns1__receiveSoapableMessageResponse)

  - <ns1:registerServer> (use wsdl2h option -g to auto-generate type _ns1__registerServer)

  - <ns1:registerServerResponse> (use wsdl2h option -g to auto-generate type _ns1__registerServerResponse)

*/

/* End of F:\GIT\Active\VS22\Client_C++\src\serverws\serverws.h */
