/* soapServerComWebserviceImplPortBindingProxy.cpp
   Generated by gSOAP 2.8.44 for F:\GIT\Active\VS22\Client_C++\src\serverCom\serverCom.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapServerComWebserviceImplPortBindingProxy.h"

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(const ServerComWebserviceImplPortBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ServerComWebserviceImplPortBindingProxy_init(_soap->imode, _soap->omode);
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingProxy_init(iomode, iomode);
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ServerComWebserviceImplPortBindingProxy_init(imode, omode);
}

ServerComWebserviceImplPortBindingProxy::~ServerComWebserviceImplPortBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void ServerComWebserviceImplPortBindingProxy::ServerComWebserviceImplPortBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://webservice.tafelServer/", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
ServerComWebserviceImplPortBindingProxy *ServerComWebserviceImplPortBindingProxy::copy()
{	ServerComWebserviceImplPortBindingProxy *dup = SOAP_NEW_COPY(ServerComWebserviceImplPortBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

ServerComWebserviceImplPortBindingProxy& ServerComWebserviceImplPortBindingProxy::operator=(const ServerComWebserviceImplPortBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void ServerComWebserviceImplPortBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ServerComWebserviceImplPortBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ServerComWebserviceImplPortBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ServerComWebserviceImplPortBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *ServerComWebserviceImplPortBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *ServerComWebserviceImplPortBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *ServerComWebserviceImplPortBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *ServerComWebserviceImplPortBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int ServerComWebserviceImplPortBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ServerComWebserviceImplPortBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void ServerComWebserviceImplPortBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ServerComWebserviceImplPortBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ServerComWebserviceImplPortBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ServerComWebserviceImplPortBindingProxy::receiveMessageCorba(const char *endpoint, const char *soap_action, ns1__receiveMessageCorba *ns1__receiveMessageCorba_, ns1__receiveMessageCorbaResponse &ns1__receiveMessageCorbaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__receiveMessageCorba soap_tmp___ns1__receiveMessageCorba;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/receiveMessageCorbaRequest";
	soap_tmp___ns1__receiveMessageCorba.ns1__receiveMessageCorba_ = ns1__receiveMessageCorba_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__receiveMessageCorba(soap, &soap_tmp___ns1__receiveMessageCorba);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__receiveMessageCorba(soap, &soap_tmp___ns1__receiveMessageCorba, "-ns1:receiveMessageCorba", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__receiveMessageCorba(soap, &soap_tmp___ns1__receiveMessageCorba, "-ns1:receiveMessageCorba", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__receiveMessageCorbaResponse*>(&ns1__receiveMessageCorbaResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__receiveMessageCorbaResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__receiveMessageCorbaResponse_.soap_get(soap, "ns1:receiveMessageCorbaResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerComWebserviceImplPortBindingProxy::deletePublicMessage(const char *endpoint, const char *soap_action, ns1__deletePublicMessage *ns1__deletePublicMessage_, ns1__deletePublicMessageResponse &ns1__deletePublicMessageResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__deletePublicMessage soap_tmp___ns1__deletePublicMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/deletePublicMessageRequest";
	soap_tmp___ns1__deletePublicMessage.ns1__deletePublicMessage_ = ns1__deletePublicMessage_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__deletePublicMessage(soap, &soap_tmp___ns1__deletePublicMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deletePublicMessage(soap, &soap_tmp___ns1__deletePublicMessage, "-ns1:deletePublicMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deletePublicMessage(soap, &soap_tmp___ns1__deletePublicMessage, "-ns1:deletePublicMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__deletePublicMessageResponse*>(&ns1__deletePublicMessageResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__deletePublicMessageResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__deletePublicMessageResponse_.soap_get(soap, "ns1:deletePublicMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerComWebserviceImplPortBindingProxy::deletePublicMessageCorba(const char *endpoint, const char *soap_action, ns1__deletePublicMessageCorba *ns1__deletePublicMessageCorba_, ns1__deletePublicMessageCorbaResponse &ns1__deletePublicMessageCorbaResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__deletePublicMessageCorba soap_tmp___ns1__deletePublicMessageCorba;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/deletePublicMessageCorbaRequest";
	soap_tmp___ns1__deletePublicMessageCorba.ns1__deletePublicMessageCorba_ = ns1__deletePublicMessageCorba_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__deletePublicMessageCorba(soap, &soap_tmp___ns1__deletePublicMessageCorba);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__deletePublicMessageCorba(soap, &soap_tmp___ns1__deletePublicMessageCorba, "-ns1:deletePublicMessageCorba", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__deletePublicMessageCorba(soap, &soap_tmp___ns1__deletePublicMessageCorba, "-ns1:deletePublicMessageCorba", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__deletePublicMessageCorbaResponse*>(&ns1__deletePublicMessageCorbaResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__deletePublicMessageCorbaResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__deletePublicMessageCorbaResponse_.soap_get(soap, "ns1:deletePublicMessageCorbaResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerComWebserviceImplPortBindingProxy::modifyPublicMessage(const char *endpoint, const char *soap_action, ns1__modifyPublicMessage *ns1__modifyPublicMessage_, ns1__modifyPublicMessageResponse &ns1__modifyPublicMessageResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__modifyPublicMessage soap_tmp___ns1__modifyPublicMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/modifyPublicMessageRequest";
	soap_tmp___ns1__modifyPublicMessage.ns1__modifyPublicMessage_ = ns1__modifyPublicMessage_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__modifyPublicMessage(soap, &soap_tmp___ns1__modifyPublicMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__modifyPublicMessage(soap, &soap_tmp___ns1__modifyPublicMessage, "-ns1:modifyPublicMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__modifyPublicMessage(soap, &soap_tmp___ns1__modifyPublicMessage, "-ns1:modifyPublicMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__modifyPublicMessageResponse*>(&ns1__modifyPublicMessageResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__modifyPublicMessageResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__modifyPublicMessageResponse_.soap_get(soap, "ns1:modifyPublicMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerComWebserviceImplPortBindingProxy::receiveMessage(const char *endpoint, const char *soap_action, ns1__receiveMessage *ns1__receiveMessage_, ns1__receiveMessageResponse &ns1__receiveMessageResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__receiveMessage soap_tmp___ns1__receiveMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/receiveMessageRequest";
	soap_tmp___ns1__receiveMessage.ns1__receiveMessage_ = ns1__receiveMessage_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__receiveMessage(soap, &soap_tmp___ns1__receiveMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__receiveMessage(soap, &soap_tmp___ns1__receiveMessage, "-ns1:receiveMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__receiveMessage(soap, &soap_tmp___ns1__receiveMessage, "-ns1:receiveMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__receiveMessageResponse*>(&ns1__receiveMessageResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__receiveMessageResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__receiveMessageResponse_.soap_get(soap, "ns1:receiveMessageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ServerComWebserviceImplPortBindingProxy::registerServer(const char *endpoint, const char *soap_action, ns1__registerServer *ns1__registerServer_, ns1__registerServerResponse &ns1__registerServerResponse_)
{	struct soap *soap = this->soap;
	struct __ns1__registerServer soap_tmp___ns1__registerServer;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/TafelWS/serverws";
	if (soap_action == NULL)
		soap_action = "http://webservice.tafelServer/ServerComWebservice/registerServerRequest";
	soap_tmp___ns1__registerServer.ns1__registerServer_ = ns1__registerServer_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__registerServer(soap, &soap_tmp___ns1__registerServer);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__registerServer(soap, &soap_tmp___ns1__registerServer, "-ns1:registerServer", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__registerServer(soap, &soap_tmp___ns1__registerServer, "-ns1:registerServer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__registerServerResponse*>(&ns1__registerServerResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__registerServerResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__registerServerResponse_.soap_get(soap, "ns1:registerServerResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
