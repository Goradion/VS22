package client;

import java.awt.Color;
import java.awt.event.KeyEvent;

import javax.swing.JComboBox;

/**
 *
 * @author Ch4in
 */
public class LoginGUI extends javax.swing.JPanel {

	private static final long serialVersionUID = 1L;
	// Variables declaration - do not modify                     
    private javax.swing.JButton anmeldeButton;
    private JComboBox<Integer> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel anmeldeLabel;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration  
    
    /**
     * Creates new form LoginGUI
     */
    public LoginGUI(Integer[] abteilungen) {
        initComponents(abteilungen);
    }


	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
                             
    private void initComponents(Integer[] abteilungen) {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<Integer>(abteilungen);
        anmeldeButton = new javax.swing.JButton();
        stateLabel = new javax.swing.JLabel();
        anmeldeLabel = new javax.swing.JLabel();

        jLabel1.setText("UserID");

        jLabel2.setText("Abteilung");
        
        anmeldeButton.setText("anmelden");

        stateLabel.setText("Status: connected");

        anmeldeLabel.setText("Nicht angemeldet");
        
       jTextField1.addKeyListener(new java.awt.event.KeyListener(){

			@Override
			public void keyPressed(KeyEvent arg0) {
			
				
				if (arg0.getKeyCode() == KeyEvent.VK_ENTER)
				{
					anmeldeButton.doClick();
					
				}
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				
				
			}

			@Override
			public void keyTyped(KeyEvent e) {
				
				
			}


			});


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(anmeldeButton)))
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(anmeldeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stateLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anmeldeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateLabel)
                    .addComponent(anmeldeLabel))
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }

    public String getUserId(){
    	return jTextField1.getText();
    }
    public void setUserId(int userID){
    	if(userID == 1){
    		anmeldeLabel.setText("Angemeldet als Koordinator");
    	} else {
    		if(userID == 0) {
    				anmeldeLabel.setText("Nicht angemeldet");
    		} else {
    				anmeldeLabel.setText("Angemeldet als User " + userID);
    		}
    	}
    }
    public void AnmeldeButtonAddActionListener(java.awt.event.ActionListener listener){
    	anmeldeButton.addActionListener(listener);
    }
    public Integer getAbteilung(){
    	return (Integer) jComboBox1.getSelectedItem();
    }
    
    public void setConectivity(boolean active){
    	if(active){
    		stateLabel.setText("Status: verbunden");
    		stateLabel.setForeground(Color.green);
    	} else {
    		stateLabel.setText("Status: nicht verbunden");
    		stateLabel.setForeground(Color.red);
    	}
    }
               
}
